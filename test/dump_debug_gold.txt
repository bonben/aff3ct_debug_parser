Run command:
./bin/aff3ct -p "8" --sim-type "BFER" -C "POLAR" -K "32" -N "64" -m "2.81" -M "2.81" -e "2" --enc-fb-gen-method "GA" --dec-type "SC" --src-type "RAND_FAST" --chn-type "AWGN" --chn-implem "FAST" --dec-implem "FAST" --dec-simd "INTRA" -d --sim-pyber "test dump" 
Curve name:
test dump
# -------------------------------------------------
# ---- A FAST FORWARD ERROR CORRECTION TOOL >> ----
# -------------------------------------------------
# Parameters :
# * Simulation ------------------------------------
#    ** Type                  = BFER
#    ** Type of bits          = int8
#    ** Type of reals         = float32
#    ** Type of quant. reals  = int8
#    ** Date (UTC)            = 2018-01-31 16:34:23
#    ** Git version           = v1.3.1-127-g6441cce
#    ** Code type (C)         = POLAR
#    ** SNR min (m)           = 2.810000 dB
#    ** SNR max (M)           = 2.810100 dB
#    ** SNR step (s)          = 0.100000 dB
#    ** Seed                  = 0
#    ** Statistics            = off
#    ** Debug mode            = on
#    ** Debug precision       = 2
#    ** Multi-threading (t)   = 1 thread(s)
#    ** SNR type              = EB
#    ** Coset approach (c)    = no
#    ** Coded monitoring      = no
#    ** Bad frames tracking   = off
#    ** Bad frames replay     = off
#    ** Bit rate              = 0.500000
#    ** Inter frame level     = 1
# * Source ----------------------------------------
#    ** Type                  = RAND_FAST
#    ** Info. bits (K_info)   = 32
# * Codec -----------------------------------------
#    ** Type                  = POLAR
#    ** Info. bits (K)        = 32
#    ** Codeword size (N_cw)  = 64
#    ** Frame size (N)        = 64
#    ** Code rate             = 0.500000
# * Encoder ---------------------------------------
#    ** Type                  = POLAR
#    ** Systematic            = yes
#    Frozen bits generator ------------------------
#    ** Type                  = GA
#    ** Sigma                 = adaptive
# * Decoder ---------------------------------------
#    ** Type (D)              = SC
#    ** Implementation        = FAST
#    ** Systematic            = yes
#    ** SIMD strategy         = INTRA
#    ** Polar node types      = {R0,R0L,R1,REP,REPL,SPC}
# * Modem -----------------------------------------
#    ** Type                  = BPSK
#    ** Bits per symbol       = 1
#    ** Sampling factor       = 1
#    ** Sigma square          = on
# * Channel ---------------------------------------
#    ** Type                  = AWGN
#    ** Implementation        = FAST
#    ** Complex               = off
#    ** Add users             = off
# * Quantizer -------------------------------------
#    ** Type                  = STD
#    ** Fixed-point config.   = {6, 1}
# * Monitor ---------------------------------------
#    ** Frame error count (e) = 2
# * Terminal --------------------------------------
#    ** Type                  = STD
#    ** Enabled               = yes
#    ** Frequency (ms)        = 500
#
# The simulation is running...
#
# -------------------------------
# New communication (nÂ°0)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# {OUT} U_K2 = [    1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# {OUT} X_N = [    1,     0,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# {OUT} X_N2 = [    1,     0,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# {OUT} X_N2 = [-1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00]
# {OUT} Y_N = [-0.61,  1.11,  0.47, -1.40,  0.53,  1.41, -1.14, -1.08,  0.53, -0.80, -0.74, -0.83,  1.18,  0.48,  0.12, -0.79,  0.30, -1.67, -1.56, -1.77, -0.95,  0.84,  0.17,  0.81,  0.75, -1.71, -1.55,  1.66,  1.72, -0.75,  1.28, -1.72,  1.41,  0.12, -0.41,  0.22, -0.21,  1.57, -0.46, -1.68, -0.86, -1.64,  1.09, -1.03,  2.39,  1.24,  2.33, -1.70, -1.94, -2.27,  0.85, -0.80, -0.40,  1.80, -0.27,  0.29, -0.47, -0.18,  2.26,  2.41,  0.64, -1.59,  1.63, -1.08]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.61,  1.11,  0.47, -1.40,  0.53,  1.41, -1.14, -1.08,  0.53, -0.80, -0.74, -0.83,  1.18,  0.48,  0.12, -0.79,  0.30, -1.67, -1.56, -1.77, -0.95,  0.84,  0.17,  0.81,  0.75, -1.71, -1.55,  1.66,  1.72, -0.75,  1.28, -1.72,  1.41,  0.12, -0.41,  0.22, -0.21,  1.57, -0.46, -1.68, -0.86, -1.64,  1.09, -1.03,  2.39,  1.24,  2.33, -1.70, -1.94, -2.27,  0.85, -0.80, -0.40,  1.80, -0.27,  0.29, -0.47, -0.18,  2.26,  2.41,  0.64, -1.59,  1.63, -1.08]
# {OUT} Y_N2 = [-0.61,  1.11,  0.47, -1.40,  0.53,  1.41, -1.14, -1.08,  0.53, -0.80, -0.74, -0.83,  1.18,  0.48,  0.12, -0.79,  0.30, -1.67, -1.56, -1.77, -0.95,  0.84,  0.17,  0.81,  0.75, -1.71, -1.55,  1.66,  1.72, -0.75,  1.28, -1.72,  1.41,  0.12, -0.41,  0.22, -0.21,  1.57, -0.46, -1.68, -0.86, -1.64,  1.09, -1.03,  2.39,  1.24,  2.33, -1.70, -1.94, -2.27,  0.85, -0.80, -0.40,  1.80, -0.27,  0.29, -0.47, -0.18,  2.26,  2.41,  0.64, -1.59,  1.63, -1.08]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.61,  1.11,  0.47, -1.40,  0.53,  1.41, -1.14, -1.08,  0.53, -0.80, -0.74, -0.83,  1.18,  0.48,  0.12, -0.79,  0.30, -1.67, -1.56, -1.77, -0.95,  0.84,  0.17,  0.81,  0.75, -1.71, -1.55,  1.66,  1.72, -0.75,  1.28, -1.72,  1.41,  0.12, -0.41,  0.22, -0.21,  1.57, -0.46, -1.68, -0.86, -1.64,  1.09, -1.03,  2.39,  1.24,  2.33, -1.70, -1.94, -2.27,  0.85, -0.80, -0.40,  1.80, -0.27,  0.29, -0.47, -0.18,  2.26,  2.41,  0.64, -1.59,  1.63, -1.08]
# {OUT} Y_N2 = [-2.34,  4.24,  1.79, -5.36,  2.03,  5.37, -4.37, -4.11,  2.01, -3.05, -2.83, -3.19,  4.53,  1.84,  0.47, -3.03,  1.14, -6.37, -5.95, -6.76, -3.64,  3.22,  0.65,  3.09,  2.85, -6.52, -5.91,  6.34,  6.56, -2.87,  4.89, -6.59,  5.40,  0.45, -1.57,  0.83, -0.80,  5.98, -1.77, -6.41, -3.29, -6.25,  4.16, -3.92,  9.12,  4.74,  8.91, -6.48, -7.40, -8.66,  3.25, -3.07, -1.52,  6.88, -1.01,  1.10, -1.78, -0.69,  8.62,  9.22,  2.44, -6.07,  6.23, -4.12]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-2.34,  4.24,  1.79, -5.36,  2.03,  5.37, -4.37, -4.11,  2.01, -3.05, -2.83, -3.19,  4.53,  1.84,  0.47, -3.03,  1.14, -6.37, -5.95, -6.76, -3.64,  3.22,  0.65,  3.09,  2.85, -6.52, -5.91,  6.34,  6.56, -2.87,  4.89, -6.59,  5.40,  0.45, -1.57,  0.83, -0.80,  5.98, -1.77, -6.41, -3.29, -6.25,  4.16, -3.92,  9.12,  4.74,  8.91, -6.48, -7.40, -8.66,  3.25, -3.07, -1.52,  6.88, -1.01,  1.10, -1.78, -0.69,  8.62,  9.22,  2.44, -6.07,  6.23, -4.12]
# {OUT} Y_N2 = [   -5,     8,     4,   -11,     4,    11,    -9,    -8,     4,    -6,    -6,    -6,     9,     4,     1,    -6,     2,   -13,   -12,   -14,    -7,     6,     1,     6,     6,   -13,   -12,    13,    13,    -6,    10,   -13,    11,     1,    -3,     2,    -2,    12,    -4,   -13,    -7,   -13,     8,    -8,    18,     9,    18,   -13,   -15,   -17,     7,    -6,    -3,    14,    -2,     2,    -4,    -1,    17,    18,     5,   -12,    12,    -8]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -5,     8,     4,   -11,     4,    11,    -9,    -8,     4,    -6,    -6,    -6,     9,     4,     1,    -6,     2,   -13,   -12,   -14,    -7,     6,     1,     6,     6,   -13,   -12,    13,    13,    -6,    10,   -13,    11,     1,    -3,     2,    -2,    12,    -4,   -13,    -7,   -13,     8,    -8,    18,     9,    18,   -13,   -15,   -17,     7,    -6,    -3,    14,    -2,     2,    -4,    -1,    17,    18,     5,   -12,    12,    -8]
# {OUT} Y_N2 = [   -5,     8,     4,   -11,     4,    11,    -9,    -8,     4,    -6,    -6,    -6,     9,     4,     1,    -6,     2,   -13,   -12,   -14,    -7,     6,     1,     6,     6,   -13,   -12,    13,    13,    -6,    10,   -13,    11,     1,    -3,     2,    -2,    12,    -4,   -13,    -7,   -13,     8,    -8,    18,     9,    18,   -13,   -15,   -17,     7,    -6,    -3,    14,    -2,     2,    -4,    -1,    17,    18,     5,   -12,    12,    -8]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -5,     8,     4,   -11,     4,    11,    -9,    -8,     4,    -6,    -6,    -6,     9,     4,     1,    -6,     2,   -13,   -12,   -14,    -7,     6,     1,     6,     6,   -13,   -12,    13,    13,    -6,    10,   -13,    11,     1,    -3,     2,    -2,    12,    -4,   -13,    -7,   -13,     8,    -8,    18,     9,    18,   -13,   -15,   -17,     7,    -6,    -3,    14,    -2,     2,    -4,    -1,    17,    18,     5,   -12,    12,    -8]
# {OUT} V_K = [ -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128]
# {OUT} V_K2 = [ -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     1]
# {IN}  V = [ -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°1)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# {OUT} U_K2 = [    0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# {OUT} X_N = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# {OUT} X_N2 = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# {OUT} X_N2 = [-1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00]
# {OUT} Y_N = [-1.16,  1.18,  1.63,  0.44,  1.02, -0.79,  1.21,  1.22, -0.82,  0.62, -0.78,  0.85,  0.09,  1.02, -0.41,  1.20, -0.02,  0.01, -1.81,  1.75, -0.77,  0.95,  0.72, -1.18, -0.24, -0.44,  2.10, -0.58,  2.75,  0.89, -2.60,  2.93, -1.17,  1.03, -0.64, -0.69, -1.31,  2.39,  1.41,  1.55,  0.13,  0.79, -1.13, -1.67,  2.57, -0.64, -1.37,  1.25,  0.90, -1.59, -0.79, -0.07, -1.23,  0.10, -0.57,  0.94, -0.19,  1.31,  0.48, -0.72,  0.64,  1.50,  0.09, -0.71]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.16,  1.18,  1.63,  0.44,  1.02, -0.79,  1.21,  1.22, -0.82,  0.62, -0.78,  0.85,  0.09,  1.02, -0.41,  1.20, -0.02,  0.01, -1.81,  1.75, -0.77,  0.95,  0.72, -1.18, -0.24, -0.44,  2.10, -0.58,  2.75,  0.89, -2.60,  2.93, -1.17,  1.03, -0.64, -0.69, -1.31,  2.39,  1.41,  1.55,  0.13,  0.79, -1.13, -1.67,  2.57, -0.64, -1.37,  1.25,  0.90, -1.59, -0.79, -0.07, -1.23,  0.10, -0.57,  0.94, -0.19,  1.31,  0.48, -0.72,  0.64,  1.50,  0.09, -0.71]
# {OUT} Y_N2 = [-1.16,  1.18,  1.63,  0.44,  1.02, -0.79,  1.21,  1.22, -0.82,  0.62, -0.78,  0.85,  0.09,  1.02, -0.41,  1.20, -0.02,  0.01, -1.81,  1.75, -0.77,  0.95,  0.72, -1.18, -0.24, -0.44,  2.10, -0.58,  2.75,  0.89, -2.60,  2.93, -1.17,  1.03, -0.64, -0.69, -1.31,  2.39,  1.41,  1.55,  0.13,  0.79, -1.13, -1.67,  2.57, -0.64, -1.37,  1.25,  0.90, -1.59, -0.79, -0.07, -1.23,  0.10, -0.57,  0.94, -0.19,  1.31,  0.48, -0.72,  0.64,  1.50,  0.09, -0.71]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.16,  1.18,  1.63,  0.44,  1.02, -0.79,  1.21,  1.22, -0.82,  0.62, -0.78,  0.85,  0.09,  1.02, -0.41,  1.20, -0.02,  0.01, -1.81,  1.75, -0.77,  0.95,  0.72, -1.18, -0.24, -0.44,  2.10, -0.58,  2.75,  0.89, -2.60,  2.93, -1.17,  1.03, -0.64, -0.69, -1.31,  2.39,  1.41,  1.55,  0.13,  0.79, -1.13, -1.67,  2.57, -0.64, -1.37,  1.25,  0.90, -1.59, -0.79, -0.07, -1.23,  0.10, -0.57,  0.94, -0.19,  1.31,  0.48, -0.72,  0.64,  1.50,  0.09, -0.71]
# {OUT} Y_N2 = [-4.43,  4.52,  6.23,  1.69,  3.91, -3.02,  4.62,  4.65, -3.12,  2.37, -2.99,  3.24,  0.34,  3.88, -1.56,  4.59, -0.09,  0.05, -6.90,  6.69, -2.95,  3.64,  2.76, -4.51, -0.91, -1.68,  8.04, -2.23, 10.51,  3.38, -9.94, 11.20, -4.47,  3.93, -2.43, -2.64, -5.01,  9.13,  5.40,  5.90,  0.51,  3.02, -4.30, -6.39,  9.80, -2.43, -5.22,  4.76,  3.44, -6.07, -3.04, -0.26, -4.70,  0.39, -2.19,  3.59, -0.74,  5.00,  1.81, -2.76,  2.44,  5.73,  0.34, -2.70]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-4.43,  4.52,  6.23,  1.69,  3.91, -3.02,  4.62,  4.65, -3.12,  2.37, -2.99,  3.24,  0.34,  3.88, -1.56,  4.59, -0.09,  0.05, -6.90,  6.69, -2.95,  3.64,  2.76, -4.51, -0.91, -1.68,  8.04, -2.23, 10.51,  3.38, -9.94, 11.20, -4.47,  3.93, -2.43, -2.64, -5.01,  9.13,  5.40,  5.90,  0.51,  3.02, -4.30, -6.39,  9.80, -2.43, -5.22,  4.76,  3.44, -6.07, -3.04, -0.26, -4.70,  0.39, -2.19,  3.59, -0.74,  5.00,  1.81, -2.76,  2.44,  5.73,  0.34, -2.70]
# {OUT} Y_N2 = [   -9,     9,    12,     3,     8,    -6,     9,     9,    -6,     5,    -6,     6,     1,     8,    -3,     9,     0,     0,   -14,    13,    -6,     7,     6,    -9,    -2,    -3,    16,    -4,    21,     7,   -20,    22,    -9,     8,    -5,    -5,   -10,    18,    11,    12,     1,     6,    -9,   -13,    20,    -5,   -10,    10,     7,   -12,    -6,    -1,    -9,     1,    -4,     7,    -1,    10,     4,    -6,     5,    11,     1,    -5]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -9,     9,    12,     3,     8,    -6,     9,     9,    -6,     5,    -6,     6,     1,     8,    -3,     9,     0,     0,   -14,    13,    -6,     7,     6,    -9,    -2,    -3,    16,    -4,    21,     7,   -20,    22,    -9,     8,    -5,    -5,   -10,    18,    11,    12,     1,     6,    -9,   -13,    20,    -5,   -10,    10,     7,   -12,    -6,    -1,    -9,     1,    -4,     7,    -1,    10,     4,    -6,     5,    11,     1,    -5]
# {OUT} Y_N2 = [   -9,     9,    12,     3,     8,    -6,     9,     9,    -6,     5,    -6,     6,     1,     8,    -3,     9,     0,     0,   -14,    13,    -6,     7,     6,    -9,    -2,    -3,    16,    -4,    21,     7,   -20,    22,    -9,     8,    -5,    -5,   -10,    18,    11,    12,     1,     6,    -9,   -13,    20,    -5,   -10,    10,     7,   -12,    -6,    -1,    -9,     1,    -4,     7,    -1,    10,     4,    -6,     5,    11,     1,    -5]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -9,     9,    12,     3,     8,    -6,     9,     9,    -6,     5,    -6,     6,     1,     8,    -3,     9,     0,     0,   -14,    13,    -6,     7,     6,    -9,    -2,    -3,    16,    -4,    21,     7,   -20,    22,    -9,     8,    -5,    -5,   -10,    18,    11,    12,     1,     6,    -9,   -13,    20,    -5,   -10,    10,     7,   -12,    -6,    -1,    -9,     1,    -4,     7,    -1,    10,     4,    -6,     5,    11,     1,    -5]
# {OUT} V_K = [    0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128]
# {OUT} V_K2 = [    0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1]
# {IN}  V = [    0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°2)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     0,     1,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     0,     1,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# {OUT} U_K2 = [    0,     0,     1,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     0,     1,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# {OUT} X_N = [    1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# {OUT} X_N2 = [    1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# {OUT} X_N2 = [-1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00]
# {OUT} Y_N = [-1.42, -0.96,  0.86, -1.31,  1.49, -2.07, -1.20, -1.44, -2.51, -1.93, -0.54,  1.29, -1.35,  1.57,  1.43,  1.41, -0.00, -0.19, -0.93,  0.96, -0.59, -0.81,  1.67, -0.23, -0.13, -0.69, -1.65, -1.94, -1.49,  1.50,  1.38, -0.95,  0.46, -1.74,  0.56, -1.48,  1.74, -1.33,  1.41, -0.29,  0.05,  1.17,  1.40, -1.03, -0.19, -1.27,  1.31, -0.22, -1.02, -1.38, -2.09,  0.15, -0.77, -1.51, -0.01,  1.28, -2.78,  2.20,  1.96,  2.15,  1.58, -0.37,  0.70,  1.85]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.42, -0.96,  0.86, -1.31,  1.49, -2.07, -1.20, -1.44, -2.51, -1.93, -0.54,  1.29, -1.35,  1.57,  1.43,  1.41, -0.00, -0.19, -0.93,  0.96, -0.59, -0.81,  1.67, -0.23, -0.13, -0.69, -1.65, -1.94, -1.49,  1.50,  1.38, -0.95,  0.46, -1.74,  0.56, -1.48,  1.74, -1.33,  1.41, -0.29,  0.05,  1.17,  1.40, -1.03, -0.19, -1.27,  1.31, -0.22, -1.02, -1.38, -2.09,  0.15, -0.77, -1.51, -0.01,  1.28, -2.78,  2.20,  1.96,  2.15,  1.58, -0.37,  0.70,  1.85]
# {OUT} Y_N2 = [-1.42, -0.96,  0.86, -1.31,  1.49, -2.07, -1.20, -1.44, -2.51, -1.93, -0.54,  1.29, -1.35,  1.57,  1.43,  1.41, -0.00, -0.19, -0.93,  0.96, -0.59, -0.81,  1.67, -0.23, -0.13, -0.69, -1.65, -1.94, -1.49,  1.50,  1.38, -0.95,  0.46, -1.74,  0.56, -1.48,  1.74, -1.33,  1.41, -0.29,  0.05,  1.17,  1.40, -1.03, -0.19, -1.27,  1.31, -0.22, -1.02, -1.38, -2.09,  0.15, -0.77, -1.51, -0.01,  1.28, -2.78,  2.20,  1.96,  2.15,  1.58, -0.37,  0.70,  1.85]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.42, -0.96,  0.86, -1.31,  1.49, -2.07, -1.20, -1.44, -2.51, -1.93, -0.54,  1.29, -1.35,  1.57,  1.43,  1.41, -0.00, -0.19, -0.93,  0.96, -0.59, -0.81,  1.67, -0.23, -0.13, -0.69, -1.65, -1.94, -1.49,  1.50,  1.38, -0.95,  0.46, -1.74,  0.56, -1.48,  1.74, -1.33,  1.41, -0.29,  0.05,  1.17,  1.40, -1.03, -0.19, -1.27,  1.31, -0.22, -1.02, -1.38, -2.09,  0.15, -0.77, -1.51, -0.01,  1.28, -2.78,  2.20,  1.96,  2.15,  1.58, -0.37,  0.70,  1.85]
# {OUT} Y_N2 = [-5.44, -3.67,  3.28, -4.99,  5.68, -7.90, -4.60, -5.51, -9.57, -7.36, -2.04,  4.94, -5.16,  5.98,  5.48,  5.38, -0.00, -0.74, -3.57,  3.68, -2.27, -3.10,  6.37, -0.88, -0.51, -2.62, -6.30, -7.41, -5.68,  5.73,  5.26, -3.61,  1.77, -6.64,  2.14, -5.65,  6.65, -5.09,  5.37, -1.10,  0.20,  4.46,  5.36, -3.93, -0.74, -4.84,  4.99, -0.83, -3.90, -5.27, -7.97,  0.56, -2.93, -5.76, -0.02,  4.90, -10.60,  8.41,  7.49,  8.23,  6.05, -1.41,  2.66,  7.06]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-5.44, -3.67,  3.28, -4.99,  5.68, -7.90, -4.60, -5.51, -9.57, -7.36, -2.04,  4.94, -5.16,  5.98,  5.48,  5.38, -0.00, -0.74, -3.57,  3.68, -2.27, -3.10,  6.37, -0.88, -0.51, -2.62, -6.30, -7.41, -5.68,  5.73,  5.26, -3.61,  1.77, -6.64,  2.14, -5.65,  6.65, -5.09,  5.37, -1.10,  0.20,  4.46,  5.36, -3.93, -0.74, -4.84,  4.99, -0.83, -3.90, -5.27, -7.97,  0.56, -2.93, -5.76, -0.02,  4.90, -10.60,  8.41,  7.49,  8.23,  6.05, -1.41,  2.66,  7.06]
# {OUT} Y_N2 = [  -11,    -7,     7,   -10,    11,   -16,    -9,   -11,   -19,   -15,    -4,    10,   -10,    12,    11,    11,     0,    -1,    -7,     7,    -5,    -6,    13,    -2,    -1,    -5,   -13,   -15,   -11,    11,    11,    -7,     4,   -13,     4,   -11,    13,   -10,    11,    -2,     0,     9,    11,    -8,    -1,   -10,    10,    -2,    -8,   -11,   -16,     1,    -6,   -12,     0,    10,   -21,    17,    15,    16,    12,    -3,     5,    14]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [  -11,    -7,     7,   -10,    11,   -16,    -9,   -11,   -19,   -15,    -4,    10,   -10,    12,    11,    11,     0,    -1,    -7,     7,    -5,    -6,    13,    -2,    -1,    -5,   -13,   -15,   -11,    11,    11,    -7,     4,   -13,     4,   -11,    13,   -10,    11,    -2,     0,     9,    11,    -8,    -1,   -10,    10,    -2,    -8,   -11,   -16,     1,    -6,   -12,     0,    10,   -21,    17,    15,    16,    12,    -3,     5,    14]
# {OUT} Y_N2 = [  -11,    -7,     7,   -10,    11,   -16,    -9,   -11,   -19,   -15,    -4,    10,   -10,    12,    11,    11,     0,    -1,    -7,     7,    -5,    -6,    13,    -2,    -1,    -5,   -13,   -15,   -11,    11,    11,    -7,     4,   -13,     4,   -11,    13,   -10,    11,    -2,     0,     9,    11,    -8,    -1,   -10,    10,    -2,    -8,   -11,   -16,     1,    -6,   -12,     0,    10,   -21,    17,    15,    16,    12,    -3,     5,    14]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [  -11,    -7,     7,   -10,    11,   -16,    -9,   -11,   -19,   -15,    -4,    10,   -10,    12,    11,    11,     0,    -1,    -7,     7,    -5,    -6,    13,    -2,    -1,    -5,   -13,   -15,   -11,    11,    11,    -7,     4,   -13,     4,   -11,    13,   -10,    11,    -2,     0,     9,    11,    -8,    -1,   -10,    10,    -2,    -8,   -11,   -16,     1,    -6,   -12,     0,    10,   -21,    17,    15,    16,    12,    -3,     5,    14]
# {OUT} V_K = [    0,     0,  -128,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,     0,  -128,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0]
# {OUT} V_K2 = [    0,     0,  -128,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     0,     1,     1,     1,     0,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0]
# {IN}  V = [    0,     0,  -128,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°3)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# {OUT} U_K2 = [    0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# {OUT} X_N = [    0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# {OUT} X_N2 = [    0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# {OUT} X_N2 = [ 1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00]
# {OUT} Y_N = [ 1.21,  1.18,  0.09,  2.00,  0.99,  1.60,  0.38,  0.91,  1.38,  1.25, -1.23, -1.61, -1.47,  2.46,  1.35,  0.63, -0.38, -1.36,  0.50,  0.92, -1.09, -0.81,  0.81, -0.99,  1.31, -1.08, -0.91, -0.59, -1.40, -1.27, -1.43, -1.27,  0.89, -1.26, -1.03, -0.16, -1.16,  0.05,  1.74,  1.39, -0.14, -2.51, -1.39, -0.67,  0.83, -0.88,  0.10,  1.64, -0.92, -0.90, -0.32, -0.54, -1.83, -0.64, -1.33,  0.82, -1.05, -1.48,  0.20,  0.81, -0.26, -1.32,  0.55,  1.02]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.21,  1.18,  0.09,  2.00,  0.99,  1.60,  0.38,  0.91,  1.38,  1.25, -1.23, -1.61, -1.47,  2.46,  1.35,  0.63, -0.38, -1.36,  0.50,  0.92, -1.09, -0.81,  0.81, -0.99,  1.31, -1.08, -0.91, -0.59, -1.40, -1.27, -1.43, -1.27,  0.89, -1.26, -1.03, -0.16, -1.16,  0.05,  1.74,  1.39, -0.14, -2.51, -1.39, -0.67,  0.83, -0.88,  0.10,  1.64, -0.92, -0.90, -0.32, -0.54, -1.83, -0.64, -1.33,  0.82, -1.05, -1.48,  0.20,  0.81, -0.26, -1.32,  0.55,  1.02]
# {OUT} Y_N2 = [ 1.21,  1.18,  0.09,  2.00,  0.99,  1.60,  0.38,  0.91,  1.38,  1.25, -1.23, -1.61, -1.47,  2.46,  1.35,  0.63, -0.38, -1.36,  0.50,  0.92, -1.09, -0.81,  0.81, -0.99,  1.31, -1.08, -0.91, -0.59, -1.40, -1.27, -1.43, -1.27,  0.89, -1.26, -1.03, -0.16, -1.16,  0.05,  1.74,  1.39, -0.14, -2.51, -1.39, -0.67,  0.83, -0.88,  0.10,  1.64, -0.92, -0.90, -0.32, -0.54, -1.83, -0.64, -1.33,  0.82, -1.05, -1.48,  0.20,  0.81, -0.26, -1.32,  0.55,  1.02]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.21,  1.18,  0.09,  2.00,  0.99,  1.60,  0.38,  0.91,  1.38,  1.25, -1.23, -1.61, -1.47,  2.46,  1.35,  0.63, -0.38, -1.36,  0.50,  0.92, -1.09, -0.81,  0.81, -0.99,  1.31, -1.08, -0.91, -0.59, -1.40, -1.27, -1.43, -1.27,  0.89, -1.26, -1.03, -0.16, -1.16,  0.05,  1.74,  1.39, -0.14, -2.51, -1.39, -0.67,  0.83, -0.88,  0.10,  1.64, -0.92, -0.90, -0.32, -0.54, -1.83, -0.64, -1.33,  0.82, -1.05, -1.48,  0.20,  0.81, -0.26, -1.32,  0.55,  1.02]
# {OUT} Y_N2 = [ 4.62,  4.50,  0.36,  7.64,  3.80,  6.11,  1.46,  3.46,  5.27,  4.79, -4.71, -6.16, -5.60,  9.40,  5.17,  2.39, -1.45, -5.21,  1.89,  3.50, -4.17, -3.08,  3.11, -3.77,  5.00, -4.11, -3.46, -2.26, -5.35, -4.86, -5.46, -4.84,  3.38, -4.82, -3.95, -0.60, -4.45,  0.19,  6.64,  5.32, -0.53, -9.60, -5.32, -2.56,  3.16, -3.38,  0.38,  6.28, -3.53, -3.45, -1.22, -2.06, -6.99, -2.46, -5.10,  3.12, -4.00, -5.67,  0.76,  3.09, -0.97, -5.03,  2.11,  3.90]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 4.62,  4.50,  0.36,  7.64,  3.80,  6.11,  1.46,  3.46,  5.27,  4.79, -4.71, -6.16, -5.60,  9.40,  5.17,  2.39, -1.45, -5.21,  1.89,  3.50, -4.17, -3.08,  3.11, -3.77,  5.00, -4.11, -3.46, -2.26, -5.35, -4.86, -5.46, -4.84,  3.38, -4.82, -3.95, -0.60, -4.45,  0.19,  6.64,  5.32, -0.53, -9.60, -5.32, -2.56,  3.16, -3.38,  0.38,  6.28, -3.53, -3.45, -1.22, -2.06, -6.99, -2.46, -5.10,  3.12, -4.00, -5.67,  0.76,  3.09, -0.97, -5.03,  2.11,  3.90]
# {OUT} Y_N2 = [    9,     9,     1,    15,     8,    12,     3,     7,    11,    10,    -9,   -12,   -11,    19,    10,     5,    -3,   -10,     4,     7,    -8,    -6,     6,    -8,    10,    -8,    -7,    -5,   -11,   -10,   -11,   -10,     7,   -10,    -8,    -1,    -9,     0,    13,    11,    -1,   -19,   -11,    -5,     6,    -7,     1,    13,    -7,    -7,    -2,    -4,   -14,    -5,   -10,     6,    -8,   -11,     2,     6,    -2,   -10,     4,     8]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [    9,     9,     1,    15,     8,    12,     3,     7,    11,    10,    -9,   -12,   -11,    19,    10,     5,    -3,   -10,     4,     7,    -8,    -6,     6,    -8,    10,    -8,    -7,    -5,   -11,   -10,   -11,   -10,     7,   -10,    -8,    -1,    -9,     0,    13,    11,    -1,   -19,   -11,    -5,     6,    -7,     1,    13,    -7,    -7,    -2,    -4,   -14,    -5,   -10,     6,    -8,   -11,     2,     6,    -2,   -10,     4,     8]
# {OUT} Y_N2 = [    9,     9,     1,    15,     8,    12,     3,     7,    11,    10,    -9,   -12,   -11,    19,    10,     5,    -3,   -10,     4,     7,    -8,    -6,     6,    -8,    10,    -8,    -7,    -5,   -11,   -10,   -11,   -10,     7,   -10,    -8,    -1,    -9,     0,    13,    11,    -1,   -19,   -11,    -5,     6,    -7,     1,    13,    -7,    -7,    -2,    -4,   -14,    -5,   -10,     6,    -8,   -11,     2,     6,    -2,   -10,     4,     8]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [    9,     9,     1,    15,     8,    12,     3,     7,    11,    10,    -9,   -12,   -11,    19,    10,     5,    -3,   -10,     4,     7,    -8,    -6,     6,    -8,    10,    -8,    -7,    -5,   -11,   -10,   -11,   -10,     7,   -10,    -8,    -1,    -9,     0,    13,    11,    -1,   -19,   -11,    -5,     6,    -7,     1,    13,    -7,    -7,    -2,    -4,   -14,    -5,   -10,     6,    -8,   -11,     2,     6,    -2,   -10,     4,     8]
# {OUT} V_K = [    0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0]
# {OUT} V_K2 = [    0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0]
# {IN}  V = [    0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°4)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# {OUT} U_K2 = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# {OUT} X_N = [    1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# {OUT} X_N2 = [    1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# {OUT} X_N2 = [-1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00]
# {OUT} Y_N = [-1.46, -0.32,  1.00, -0.11, -1.24,  1.49, -2.08, -0.84,  0.80, -1.53,  0.43,  0.03, -1.32,  0.35, -0.40,  2.28,  0.44,  0.24,  0.54,  0.71, -1.54, -1.13,  0.20, -1.21, -0.98,  1.02,  1.85,  0.26, -2.39,  1.16, -0.04, -0.87, -1.56, -0.80, -1.28, -0.87, -1.47, -1.26,  0.78, -0.33,  0.74,  2.40, -0.85,  0.35, -0.43, -0.01,  1.42,  1.43, -2.05,  1.43,  1.35, -0.19,  0.76, -1.01,  1.92,  0.75,  1.82,  1.25,  1.58, -0.48,  1.26,  2.01,  1.22,  1.58]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.46, -0.32,  1.00, -0.11, -1.24,  1.49, -2.08, -0.84,  0.80, -1.53,  0.43,  0.03, -1.32,  0.35, -0.40,  2.28,  0.44,  0.24,  0.54,  0.71, -1.54, -1.13,  0.20, -1.21, -0.98,  1.02,  1.85,  0.26, -2.39,  1.16, -0.04, -0.87, -1.56, -0.80, -1.28, -0.87, -1.47, -1.26,  0.78, -0.33,  0.74,  2.40, -0.85,  0.35, -0.43, -0.01,  1.42,  1.43, -2.05,  1.43,  1.35, -0.19,  0.76, -1.01,  1.92,  0.75,  1.82,  1.25,  1.58, -0.48,  1.26,  2.01,  1.22,  1.58]
# {OUT} Y_N2 = [-1.46, -0.32,  1.00, -0.11, -1.24,  1.49, -2.08, -0.84,  0.80, -1.53,  0.43,  0.03, -1.32,  0.35, -0.40,  2.28,  0.44,  0.24,  0.54,  0.71, -1.54, -1.13,  0.20, -1.21, -0.98,  1.02,  1.85,  0.26, -2.39,  1.16, -0.04, -0.87, -1.56, -0.80, -1.28, -0.87, -1.47, -1.26,  0.78, -0.33,  0.74,  2.40, -0.85,  0.35, -0.43, -0.01,  1.42,  1.43, -2.05,  1.43,  1.35, -0.19,  0.76, -1.01,  1.92,  0.75,  1.82,  1.25,  1.58, -0.48,  1.26,  2.01,  1.22,  1.58]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.46, -0.32,  1.00, -0.11, -1.24,  1.49, -2.08, -0.84,  0.80, -1.53,  0.43,  0.03, -1.32,  0.35, -0.40,  2.28,  0.44,  0.24,  0.54,  0.71, -1.54, -1.13,  0.20, -1.21, -0.98,  1.02,  1.85,  0.26, -2.39,  1.16, -0.04, -0.87, -1.56, -0.80, -1.28, -0.87, -1.47, -1.26,  0.78, -0.33,  0.74,  2.40, -0.85,  0.35, -0.43, -0.01,  1.42,  1.43, -2.05,  1.43,  1.35, -0.19,  0.76, -1.01,  1.92,  0.75,  1.82,  1.25,  1.58, -0.48,  1.26,  2.01,  1.22,  1.58]
# {OUT} Y_N2 = [-5.56, -1.24,  3.81, -0.41, -4.73,  5.71, -7.96, -3.19,  3.07, -5.83,  1.63,  0.11, -5.04,  1.34, -1.52,  8.69,  1.67,  0.94,  2.05,  2.71, -5.87, -4.33,  0.77, -4.63, -3.75,  3.88,  7.07,  1.01, -9.14,  4.45, -0.17, -3.34, -5.97, -3.06, -4.90, -3.34, -5.62, -4.80,  2.97, -1.25,  2.83,  9.18, -3.24,  1.35, -1.65, -0.04,  5.41,  5.46, -7.84,  5.45,  5.15, -0.74,  2.92, -3.88,  7.34,  2.85,  6.96,  4.78,  6.05, -1.83,  4.82,  7.67,  4.67,  6.05]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-5.56, -1.24,  3.81, -0.41, -4.73,  5.71, -7.96, -3.19,  3.07, -5.83,  1.63,  0.11, -5.04,  1.34, -1.52,  8.69,  1.67,  0.94,  2.05,  2.71, -5.87, -4.33,  0.77, -4.63, -3.75,  3.88,  7.07,  1.01, -9.14,  4.45, -0.17, -3.34, -5.97, -3.06, -4.90, -3.34, -5.62, -4.80,  2.97, -1.25,  2.83,  9.18, -3.24,  1.35, -1.65, -0.04,  5.41,  5.46, -7.84,  5.45,  5.15, -0.74,  2.92, -3.88,  7.34,  2.85,  6.96,  4.78,  6.05, -1.83,  4.82,  7.67,  4.67,  6.05]
# {OUT} Y_N2 = [  -11,    -2,     8,    -1,    -9,    11,   -16,    -6,     6,   -12,     3,     0,   -10,     3,    -3,    17,     3,     2,     4,     5,   -12,    -9,     2,    -9,    -7,     8,    14,     2,   -18,     9,     0,    -7,   -12,    -6,   -10,    -7,   -11,   -10,     6,    -2,     6,    18,    -6,     3,    -3,     0,    11,    11,   -16,    11,    10,    -1,     6,    -8,    15,     6,    14,    10,    12,    -4,    10,    15,     9,    12]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [  -11,    -2,     8,    -1,    -9,    11,   -16,    -6,     6,   -12,     3,     0,   -10,     3,    -3,    17,     3,     2,     4,     5,   -12,    -9,     2,    -9,    -7,     8,    14,     2,   -18,     9,     0,    -7,   -12,    -6,   -10,    -7,   -11,   -10,     6,    -2,     6,    18,    -6,     3,    -3,     0,    11,    11,   -16,    11,    10,    -1,     6,    -8,    15,     6,    14,    10,    12,    -4,    10,    15,     9,    12]
# {OUT} Y_N2 = [  -11,    -2,     8,    -1,    -9,    11,   -16,    -6,     6,   -12,     3,     0,   -10,     3,    -3,    17,     3,     2,     4,     5,   -12,    -9,     2,    -9,    -7,     8,    14,     2,   -18,     9,     0,    -7,   -12,    -6,   -10,    -7,   -11,   -10,     6,    -2,     6,    18,    -6,     3,    -3,     0,    11,    11,   -16,    11,    10,    -1,     6,    -8,    15,     6,    14,    10,    12,    -4,    10,    15,     9,    12]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [  -11,    -2,     8,    -1,    -9,    11,   -16,    -6,     6,   -12,     3,     0,   -10,     3,    -3,    17,     3,     2,     4,     5,   -12,    -9,     2,    -9,    -7,     8,    14,     2,   -18,     9,     0,    -7,   -12,    -6,   -10,    -7,   -11,   -10,     6,    -2,     6,    18,    -6,     3,    -3,     0,    11,    11,   -16,    11,    10,    -1,     6,    -8,    15,     6,    14,    10,    12,    -4,    10,    15,     9,    12]
# {OUT} V_K = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0]
# {OUT} V_K2 = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0]
# {IN}  V = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°5)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     1,     0,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     1,     0,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# {OUT} U_K2 = [    0,     1,     1,     0,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     1,     0,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# {OUT} X_N = [    0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# {OUT} X_N2 = [    0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# {OUT} X_N2 = [ 1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00]
# {OUT} Y_N = [ 1.30,  1.00, -0.95, -0.88, -0.96,  1.18, -2.54, -2.13, -2.51, -2.02, -1.71,  0.21,  0.81,  1.02, -1.05, -0.59,  0.79,  0.07, -0.49,  1.54,  0.66,  2.48,  1.11, -1.60, -0.70, -0.01,  0.73,  1.75,  0.30, -0.14,  1.42, -0.49, -0.35, -0.65,  0.31, -1.87,  0.18,  0.72,  0.48,  2.25, -0.74,  2.06, -1.28,  0.02,  0.35,  0.81, -0.26, -0.62,  0.62, -1.22, -0.30,  0.53,  1.59,  1.35, -1.64,  1.04,  0.25, -0.85,  0.02,  1.11, -2.37, -0.89, -0.11,  1.64]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.30,  1.00, -0.95, -0.88, -0.96,  1.18, -2.54, -2.13, -2.51, -2.02, -1.71,  0.21,  0.81,  1.02, -1.05, -0.59,  0.79,  0.07, -0.49,  1.54,  0.66,  2.48,  1.11, -1.60, -0.70, -0.01,  0.73,  1.75,  0.30, -0.14,  1.42, -0.49, -0.35, -0.65,  0.31, -1.87,  0.18,  0.72,  0.48,  2.25, -0.74,  2.06, -1.28,  0.02,  0.35,  0.81, -0.26, -0.62,  0.62, -1.22, -0.30,  0.53,  1.59,  1.35, -1.64,  1.04,  0.25, -0.85,  0.02,  1.11, -2.37, -0.89, -0.11,  1.64]
# {OUT} Y_N2 = [ 1.30,  1.00, -0.95, -0.88, -0.96,  1.18, -2.54, -2.13, -2.51, -2.02, -1.71,  0.21,  0.81,  1.02, -1.05, -0.59,  0.79,  0.07, -0.49,  1.54,  0.66,  2.48,  1.11, -1.60, -0.70, -0.01,  0.73,  1.75,  0.30, -0.14,  1.42, -0.49, -0.35, -0.65,  0.31, -1.87,  0.18,  0.72,  0.48,  2.25, -0.74,  2.06, -1.28,  0.02,  0.35,  0.81, -0.26, -0.62,  0.62, -1.22, -0.30,  0.53,  1.59,  1.35, -1.64,  1.04,  0.25, -0.85,  0.02,  1.11, -2.37, -0.89, -0.11,  1.64]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.30,  1.00, -0.95, -0.88, -0.96,  1.18, -2.54, -2.13, -2.51, -2.02, -1.71,  0.21,  0.81,  1.02, -1.05, -0.59,  0.79,  0.07, -0.49,  1.54,  0.66,  2.48,  1.11, -1.60, -0.70, -0.01,  0.73,  1.75,  0.30, -0.14,  1.42, -0.49, -0.35, -0.65,  0.31, -1.87,  0.18,  0.72,  0.48,  2.25, -0.74,  2.06, -1.28,  0.02,  0.35,  0.81, -0.26, -0.62,  0.62, -1.22, -0.30,  0.53,  1.59,  1.35, -1.64,  1.04,  0.25, -0.85,  0.02,  1.11, -2.37, -0.89, -0.11,  1.64]
# {OUT} Y_N2 = [ 4.98,  3.83, -3.61, -3.38, -3.68,  4.51, -9.71, -8.12, -9.58, -7.72, -6.53,  0.82,  3.11,  3.91, -4.00, -2.27,  3.02,  0.26, -1.86,  5.87,  2.51,  9.49,  4.25, -6.11, -2.67, -0.05,  2.79,  6.68,  1.13, -0.55,  5.41, -1.87, -1.34, -2.50,  1.18, -7.16,  0.70,  2.75,  1.84,  8.60, -2.84,  7.87, -4.89,  0.07,  1.33,  3.08, -0.98, -2.36,  2.37, -4.67, -1.14,  2.02,  6.06,  5.14, -6.28,  3.97,  0.94, -3.25,  0.06,  4.26, -9.06, -3.39, -0.42,  6.26]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 4.98,  3.83, -3.61, -3.38, -3.68,  4.51, -9.71, -8.12, -9.58, -7.72, -6.53,  0.82,  3.11,  3.91, -4.00, -2.27,  3.02,  0.26, -1.86,  5.87,  2.51,  9.49,  4.25, -6.11, -2.67, -0.05,  2.79,  6.68,  1.13, -0.55,  5.41, -1.87, -1.34, -2.50,  1.18, -7.16,  0.70,  2.75,  1.84,  8.60, -2.84,  7.87, -4.89,  0.07,  1.33,  3.08, -0.98, -2.36,  2.37, -4.67, -1.14,  2.02,  6.06,  5.14, -6.28,  3.97,  0.94, -3.25,  0.06,  4.26, -9.06, -3.39, -0.42,  6.26]
# {OUT} Y_N2 = [   10,     8,    -7,    -7,    -7,     9,   -19,   -16,   -19,   -15,   -13,     2,     6,     8,    -8,    -5,     6,     1,    -4,    12,     5,    19,     8,   -12,    -5,     0,     6,    13,     2,    -1,    11,    -4,    -3,    -5,     2,   -14,     1,     5,     4,    17,    -6,    16,   -10,     0,     3,     6,    -2,    -5,     5,    -9,    -2,     4,    12,    10,   -13,     8,     2,    -6,     0,     9,   -18,    -7,    -1,    13]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   10,     8,    -7,    -7,    -7,     9,   -19,   -16,   -19,   -15,   -13,     2,     6,     8,    -8,    -5,     6,     1,    -4,    12,     5,    19,     8,   -12,    -5,     0,     6,    13,     2,    -1,    11,    -4,    -3,    -5,     2,   -14,     1,     5,     4,    17,    -6,    16,   -10,     0,     3,     6,    -2,    -5,     5,    -9,    -2,     4,    12,    10,   -13,     8,     2,    -6,     0,     9,   -18,    -7,    -1,    13]
# {OUT} Y_N2 = [   10,     8,    -7,    -7,    -7,     9,   -19,   -16,   -19,   -15,   -13,     2,     6,     8,    -8,    -5,     6,     1,    -4,    12,     5,    19,     8,   -12,    -5,     0,     6,    13,     2,    -1,    11,    -4,    -3,    -5,     2,   -14,     1,     5,     4,    17,    -6,    16,   -10,     0,     3,     6,    -2,    -5,     5,    -9,    -2,     4,    12,    10,   -13,     8,     2,    -6,     0,     9,   -18,    -7,    -1,    13]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   10,     8,    -7,    -7,    -7,     9,   -19,   -16,   -19,   -15,   -13,     2,     6,     8,    -8,    -5,     6,     1,    -4,    12,     5,    19,     8,   -12,    -5,     0,     6,    13,     2,    -1,    11,    -4,    -3,    -5,     2,   -14,     1,     5,     4,    17,    -6,    16,   -10,     0,     3,     6,    -2,    -5,     5,    -9,    -2,     4,    12,    10,   -13,     8,     2,    -6,     0,     9,   -18,    -7,    -1,    13]
# {OUT} V_K = [    0,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0]
# {OUT} V_K2 = [    0,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     1,     0,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     0]
# {IN}  V = [    0,  -128,  -128,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,  -128,     0]
# Returned status: 5
#
# -------------------------------
# New communication (nÂ°6)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# {OUT} U_K2 = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# {OUT} X_N = [    1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# {OUT} X_N2 = [    1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# {OUT} X_N2 = [-1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00]
# {OUT} Y_N = [-1.02,  0.63,  2.28, -1.33, -0.97, -0.69, -1.13,  0.01, -1.89,  0.89,  1.19, -0.59,  0.48, -2.65,  1.56,  0.24,  0.72, -1.07,  2.38,  0.04, -1.65, -0.91, -1.16,  0.51,  1.40, -1.04,  0.75,  0.16,  1.21, -0.93,  0.19,  1.90,  0.27, -1.21, -1.49, -0.87,  0.04,  1.41, -1.06, -0.96,  1.29, -1.05, -2.15, -0.62,  0.69,  0.86,  0.21, -2.01,  0.89,  0.83, -1.76,  1.38, -0.83,  1.21, -0.61,  0.58,  0.40,  0.95, -0.29,  1.01, -0.05,  0.71,  0.47,  1.76]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.02,  0.63,  2.28, -1.33, -0.97, -0.69, -1.13,  0.01, -1.89,  0.89,  1.19, -0.59,  0.48, -2.65,  1.56,  0.24,  0.72, -1.07,  2.38,  0.04, -1.65, -0.91, -1.16,  0.51,  1.40, -1.04,  0.75,  0.16,  1.21, -0.93,  0.19,  1.90,  0.27, -1.21, -1.49, -0.87,  0.04,  1.41, -1.06, -0.96,  1.29, -1.05, -2.15, -0.62,  0.69,  0.86,  0.21, -2.01,  0.89,  0.83, -1.76,  1.38, -0.83,  1.21, -0.61,  0.58,  0.40,  0.95, -0.29,  1.01, -0.05,  0.71,  0.47,  1.76]
# {OUT} Y_N2 = [-1.02,  0.63,  2.28, -1.33, -0.97, -0.69, -1.13,  0.01, -1.89,  0.89,  1.19, -0.59,  0.48, -2.65,  1.56,  0.24,  0.72, -1.07,  2.38,  0.04, -1.65, -0.91, -1.16,  0.51,  1.40, -1.04,  0.75,  0.16,  1.21, -0.93,  0.19,  1.90,  0.27, -1.21, -1.49, -0.87,  0.04,  1.41, -1.06, -0.96,  1.29, -1.05, -2.15, -0.62,  0.69,  0.86,  0.21, -2.01,  0.89,  0.83, -1.76,  1.38, -0.83,  1.21, -0.61,  0.58,  0.40,  0.95, -0.29,  1.01, -0.05,  0.71,  0.47,  1.76]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.02,  0.63,  2.28, -1.33, -0.97, -0.69, -1.13,  0.01, -1.89,  0.89,  1.19, -0.59,  0.48, -2.65,  1.56,  0.24,  0.72, -1.07,  2.38,  0.04, -1.65, -0.91, -1.16,  0.51,  1.40, -1.04,  0.75,  0.16,  1.21, -0.93,  0.19,  1.90,  0.27, -1.21, -1.49, -0.87,  0.04,  1.41, -1.06, -0.96,  1.29, -1.05, -2.15, -0.62,  0.69,  0.86,  0.21, -2.01,  0.89,  0.83, -1.76,  1.38, -0.83,  1.21, -0.61,  0.58,  0.40,  0.95, -0.29,  1.01, -0.05,  0.71,  0.47,  1.76]
# {OUT} Y_N2 = [-3.88,  2.42,  8.70, -5.07, -3.71, -2.63, -4.33,  0.06, -7.22,  3.38,  4.55, -2.24,  1.82, -10.11,  5.96,  0.91,  2.75, -4.10,  9.10,  0.14, -6.29, -3.47, -4.41,  1.94,  5.35, -3.96,  2.86,  0.63,  4.62, -3.54,  0.71,  7.26,  1.04, -4.61, -5.69, -3.32,  0.16,  5.37, -4.07, -3.68,  4.94, -4.00, -8.21, -2.38,  2.62,  3.28,  0.79, -7.68,  3.42,  3.17, -6.74,  5.27, -3.16,  4.60, -2.34,  2.23,  1.51,  3.64, -1.12,  3.84, -0.21,  2.70,  1.80,  6.72]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-3.88,  2.42,  8.70, -5.07, -3.71, -2.63, -4.33,  0.06, -7.22,  3.38,  4.55, -2.24,  1.82, -10.11,  5.96,  0.91,  2.75, -4.10,  9.10,  0.14, -6.29, -3.47, -4.41,  1.94,  5.35, -3.96,  2.86,  0.63,  4.62, -3.54,  0.71,  7.26,  1.04, -4.61, -5.69, -3.32,  0.16,  5.37, -4.07, -3.68,  4.94, -4.00, -8.21, -2.38,  2.62,  3.28,  0.79, -7.68,  3.42,  3.17, -6.74,  5.27, -3.16,  4.60, -2.34,  2.23,  1.51,  3.64, -1.12,  3.84, -0.21,  2.70,  1.80,  6.72]
# {OUT} Y_N2 = [   -8,     5,    17,   -10,    -7,    -5,    -9,     0,   -14,     7,     9,    -4,     4,   -20,    12,     2,     6,    -8,    18,     0,   -13,    -7,    -9,     4,    11,    -8,     6,     1,     9,    -7,     1,    15,     2,    -9,   -11,    -7,     0,    11,    -8,    -7,    10,    -8,   -16,    -5,     5,     7,     2,   -15,     7,     6,   -13,    11,    -6,     9,    -5,     4,     3,     7,    -2,     8,     0,     5,     4,    13]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -8,     5,    17,   -10,    -7,    -5,    -9,     0,   -14,     7,     9,    -4,     4,   -20,    12,     2,     6,    -8,    18,     0,   -13,    -7,    -9,     4,    11,    -8,     6,     1,     9,    -7,     1,    15,     2,    -9,   -11,    -7,     0,    11,    -8,    -7,    10,    -8,   -16,    -5,     5,     7,     2,   -15,     7,     6,   -13,    11,    -6,     9,    -5,     4,     3,     7,    -2,     8,     0,     5,     4,    13]
# {OUT} Y_N2 = [   -8,     5,    17,   -10,    -7,    -5,    -9,     0,   -14,     7,     9,    -4,     4,   -20,    12,     2,     6,    -8,    18,     0,   -13,    -7,    -9,     4,    11,    -8,     6,     1,     9,    -7,     1,    15,     2,    -9,   -11,    -7,     0,    11,    -8,    -7,    10,    -8,   -16,    -5,     5,     7,     2,   -15,     7,     6,   -13,    11,    -6,     9,    -5,     4,     3,     7,    -2,     8,     0,     5,     4,    13]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -8,     5,    17,   -10,    -7,    -5,    -9,     0,   -14,     7,     9,    -4,     4,   -20,    12,     2,     6,    -8,    18,     0,   -13,    -7,    -9,     4,    11,    -8,     6,     1,     9,    -7,     1,    15,     2,    -9,   -11,    -7,     0,    11,    -8,    -7,    10,    -8,   -16,    -5,     5,     7,     2,   -15,     7,     6,   -13,    11,    -6,     9,    -5,     4,     3,     7,    -2,     8,     0,     5,     4,    13]
# {OUT} V_K = [ -128,     0,     0,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,     0,     0,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,     0]
# {OUT} V_K2 = [ -128,     0,     0,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0]
# {IN}  V = [ -128,     0,     0,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°7)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# {OUT} U_K2 = [    0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# {OUT} X_N = [    1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# {OUT} X_N2 = [    1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# {OUT} X_N2 = [-1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00]
# {OUT} Y_N = [-0.69, -1.91,  1.51,  0.30,  1.69,  1.30,  1.71,  2.25, -0.63,  1.06, -1.62,  1.24, -0.70, -0.55,  0.04,  0.83,  1.89,  0.46,  1.24,  1.02,  1.80, -0.93,  1.45,  1.08, -0.64, -1.48,  0.74, -1.54,  0.82,  1.68,  0.63, -1.50,  0.67,  1.42, -0.78,  0.23,  0.99,  2.27,  0.40,  0.66, -0.14, -1.27,  0.82, -1.48, -1.38, -0.14, -1.79,  1.92, -0.43,  0.09, -1.10, -1.18, -0.10, -0.64,  0.77,  0.76,  1.54,  1.80, -1.25,  1.45,  0.06,  0.83,  1.39, -1.06]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.69, -1.91,  1.51,  0.30,  1.69,  1.30,  1.71,  2.25, -0.63,  1.06, -1.62,  1.24, -0.70, -0.55,  0.04,  0.83,  1.89,  0.46,  1.24,  1.02,  1.80, -0.93,  1.45,  1.08, -0.64, -1.48,  0.74, -1.54,  0.82,  1.68,  0.63, -1.50,  0.67,  1.42, -0.78,  0.23,  0.99,  2.27,  0.40,  0.66, -0.14, -1.27,  0.82, -1.48, -1.38, -0.14, -1.79,  1.92, -0.43,  0.09, -1.10, -1.18, -0.10, -0.64,  0.77,  0.76,  1.54,  1.80, -1.25,  1.45,  0.06,  0.83,  1.39, -1.06]
# {OUT} Y_N2 = [-0.69, -1.91,  1.51,  0.30,  1.69,  1.30,  1.71,  2.25, -0.63,  1.06, -1.62,  1.24, -0.70, -0.55,  0.04,  0.83,  1.89,  0.46,  1.24,  1.02,  1.80, -0.93,  1.45,  1.08, -0.64, -1.48,  0.74, -1.54,  0.82,  1.68,  0.63, -1.50,  0.67,  1.42, -0.78,  0.23,  0.99,  2.27,  0.40,  0.66, -0.14, -1.27,  0.82, -1.48, -1.38, -0.14, -1.79,  1.92, -0.43,  0.09, -1.10, -1.18, -0.10, -0.64,  0.77,  0.76,  1.54,  1.80, -1.25,  1.45,  0.06,  0.83,  1.39, -1.06]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.69, -1.91,  1.51,  0.30,  1.69,  1.30,  1.71,  2.25, -0.63,  1.06, -1.62,  1.24, -0.70, -0.55,  0.04,  0.83,  1.89,  0.46,  1.24,  1.02,  1.80, -0.93,  1.45,  1.08, -0.64, -1.48,  0.74, -1.54,  0.82,  1.68,  0.63, -1.50,  0.67,  1.42, -0.78,  0.23,  0.99,  2.27,  0.40,  0.66, -0.14, -1.27,  0.82, -1.48, -1.38, -0.14, -1.79,  1.92, -0.43,  0.09, -1.10, -1.18, -0.10, -0.64,  0.77,  0.76,  1.54,  1.80, -1.25,  1.45,  0.06,  0.83,  1.39, -1.06]
# {OUT} Y_N2 = [-2.63, -7.31,  5.77,  1.15,  6.45,  4.95,  6.55,  8.60, -2.39,  4.03, -6.20,  4.73, -2.67, -2.11,  0.14,  3.19,  7.20,  1.75,  4.74,  3.88,  6.86, -3.57,  5.53,  4.11, -2.46, -5.65,  2.83, -5.88,  3.13,  6.42,  2.40, -5.74,  2.54,  5.43, -2.99,  0.87,  3.79,  8.67,  1.54,  2.50, -0.52, -4.85,  3.14, -5.64, -5.25, -0.54, -6.85,  7.33, -1.64,  0.34, -4.22, -4.51, -0.39, -2.46,  2.94,  2.91,  5.88,  6.86, -4.78,  5.52,  0.24,  3.19,  5.32, -4.05]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-2.63, -7.31,  5.77,  1.15,  6.45,  4.95,  6.55,  8.60, -2.39,  4.03, -6.20,  4.73, -2.67, -2.11,  0.14,  3.19,  7.20,  1.75,  4.74,  3.88,  6.86, -3.57,  5.53,  4.11, -2.46, -5.65,  2.83, -5.88,  3.13,  6.42,  2.40, -5.74,  2.54,  5.43, -2.99,  0.87,  3.79,  8.67,  1.54,  2.50, -0.52, -4.85,  3.14, -5.64, -5.25, -0.54, -6.85,  7.33, -1.64,  0.34, -4.22, -4.51, -0.39, -2.46,  2.94,  2.91,  5.88,  6.86, -4.78,  5.52,  0.24,  3.19,  5.32, -4.05]
# {OUT} Y_N2 = [   -5,   -15,    12,     2,    13,    10,    13,    17,    -5,     8,   -12,     9,    -5,    -4,     0,     6,    14,     3,     9,     8,    14,    -7,    11,     8,    -5,   -11,     6,   -12,     6,    13,     5,   -11,     5,    11,    -6,     2,     8,    17,     3,     5,    -1,   -10,     6,   -11,   -11,    -1,   -14,    15,    -3,     1,    -8,    -9,    -1,    -5,     6,     6,    12,    14,   -10,    11,     0,     6,    11,    -8]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -5,   -15,    12,     2,    13,    10,    13,    17,    -5,     8,   -12,     9,    -5,    -4,     0,     6,    14,     3,     9,     8,    14,    -7,    11,     8,    -5,   -11,     6,   -12,     6,    13,     5,   -11,     5,    11,    -6,     2,     8,    17,     3,     5,    -1,   -10,     6,   -11,   -11,    -1,   -14,    15,    -3,     1,    -8,    -9,    -1,    -5,     6,     6,    12,    14,   -10,    11,     0,     6,    11,    -8]
# {OUT} Y_N2 = [   -5,   -15,    12,     2,    13,    10,    13,    17,    -5,     8,   -12,     9,    -5,    -4,     0,     6,    14,     3,     9,     8,    14,    -7,    11,     8,    -5,   -11,     6,   -12,     6,    13,     5,   -11,     5,    11,    -6,     2,     8,    17,     3,     5,    -1,   -10,     6,   -11,   -11,    -1,   -14,    15,    -3,     1,    -8,    -9,    -1,    -5,     6,     6,    12,    14,   -10,    11,     0,     6,    11,    -8]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -5,   -15,    12,     2,    13,    10,    13,    17,    -5,     8,   -12,     9,    -5,    -4,     0,     6,    14,     3,     9,     8,    14,    -7,    11,     8,    -5,   -11,     6,   -12,     6,    13,     5,   -11,     5,    11,    -6,     2,     8,    17,     3,     5,    -1,   -10,     6,   -11,   -11,    -1,   -14,    15,    -3,     1,    -8,    -9,    -1,    -5,     6,     6,    12,    14,   -10,    11,     0,     6,    11,    -8]
# {OUT} V_K = [    0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,     0,  -128]
# {OUT} V_K2 = [    0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1]
# {IN}  V = [    0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,     0,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°8)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# {OUT} U_K2 = [    1,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# {OUT} X_N = [    1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# {OUT} X_N2 = [    1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# {OUT} X_N2 = [-1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00]
# {OUT} Y_N = [-1.26,  0.92, -0.49, -0.88, -0.90, -1.02,  1.27,  0.77,  1.49,  0.52,  0.73, -0.39,  0.62,  0.70, -1.96, -0.41,  0.01, -0.71,  0.13, -1.48,  0.77,  1.25,  0.19,  0.10,  0.69,  1.33,  0.66,  1.76, -1.14,  1.32, -0.64, -0.29,  0.08,  1.28, -0.71,  1.77, -0.45, -0.74, -0.93,  1.28,  2.68,  0.47, -0.06,  1.52,  0.92, -0.88,  1.42, -1.46, -2.16, -1.64,  0.86,  1.39,  1.07, -1.16, -1.62, -2.64, -0.74,  0.50, -0.02, -1.23,  1.03, -1.79,  1.18, -2.13]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.26,  0.92, -0.49, -0.88, -0.90, -1.02,  1.27,  0.77,  1.49,  0.52,  0.73, -0.39,  0.62,  0.70, -1.96, -0.41,  0.01, -0.71,  0.13, -1.48,  0.77,  1.25,  0.19,  0.10,  0.69,  1.33,  0.66,  1.76, -1.14,  1.32, -0.64, -0.29,  0.08,  1.28, -0.71,  1.77, -0.45, -0.74, -0.93,  1.28,  2.68,  0.47, -0.06,  1.52,  0.92, -0.88,  1.42, -1.46, -2.16, -1.64,  0.86,  1.39,  1.07, -1.16, -1.62, -2.64, -0.74,  0.50, -0.02, -1.23,  1.03, -1.79,  1.18, -2.13]
# {OUT} Y_N2 = [-1.26,  0.92, -0.49, -0.88, -0.90, -1.02,  1.27,  0.77,  1.49,  0.52,  0.73, -0.39,  0.62,  0.70, -1.96, -0.41,  0.01, -0.71,  0.13, -1.48,  0.77,  1.25,  0.19,  0.10,  0.69,  1.33,  0.66,  1.76, -1.14,  1.32, -0.64, -0.29,  0.08,  1.28, -0.71,  1.77, -0.45, -0.74, -0.93,  1.28,  2.68,  0.47, -0.06,  1.52,  0.92, -0.88,  1.42, -1.46, -2.16, -1.64,  0.86,  1.39,  1.07, -1.16, -1.62, -2.64, -0.74,  0.50, -0.02, -1.23,  1.03, -1.79,  1.18, -2.13]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.26,  0.92, -0.49, -0.88, -0.90, -1.02,  1.27,  0.77,  1.49,  0.52,  0.73, -0.39,  0.62,  0.70, -1.96, -0.41,  0.01, -0.71,  0.13, -1.48,  0.77,  1.25,  0.19,  0.10,  0.69,  1.33,  0.66,  1.76, -1.14,  1.32, -0.64, -0.29,  0.08,  1.28, -0.71,  1.77, -0.45, -0.74, -0.93,  1.28,  2.68,  0.47, -0.06,  1.52,  0.92, -0.88,  1.42, -1.46, -2.16, -1.64,  0.86,  1.39,  1.07, -1.16, -1.62, -2.64, -0.74,  0.50, -0.02, -1.23,  1.03, -1.79,  1.18, -2.13]
# {OUT} Y_N2 = [-4.79,  3.53, -1.86, -3.38, -3.43, -3.88,  4.86,  2.92,  5.68,  1.98,  2.79, -1.50,  2.38,  2.66, -7.50, -1.56,  0.05, -2.72,  0.50, -5.66,  2.92,  4.77,  0.74,  0.40,  2.62,  5.06,  2.52,  6.71, -4.37,  5.05, -2.43, -1.10,  0.32,  4.90, -2.71,  6.77, -1.73, -2.82, -3.54,  4.89, 10.22,  1.79, -0.23,  5.82,  3.50, -3.37,  5.43, -5.59, -8.25, -6.28,  3.29,  5.32,  4.07, -4.44, -6.20, -10.09, -2.85,  1.90, -0.09, -4.70,  3.92, -6.84,  4.50, -8.14]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-4.79,  3.53, -1.86, -3.38, -3.43, -3.88,  4.86,  2.92,  5.68,  1.98,  2.79, -1.50,  2.38,  2.66, -7.50, -1.56,  0.05, -2.72,  0.50, -5.66,  2.92,  4.77,  0.74,  0.40,  2.62,  5.06,  2.52,  6.71, -4.37,  5.05, -2.43, -1.10,  0.32,  4.90, -2.71,  6.77, -1.73, -2.82, -3.54,  4.89, 10.22,  1.79, -0.23,  5.82,  3.50, -3.37,  5.43, -5.59, -8.25, -6.28,  3.29,  5.32,  4.07, -4.44, -6.20, -10.09, -2.85,  1.90, -0.09, -4.70,  3.92, -6.84,  4.50, -8.14]
# {OUT} Y_N2 = [  -10,     7,    -4,    -7,    -7,    -8,    10,     6,    11,     4,     6,    -3,     5,     5,   -15,    -3,     0,    -5,     1,   -11,     6,    10,     1,     1,     5,    10,     5,    13,    -9,    10,    -5,    -2,     1,    10,    -5,    14,    -3,    -6,    -7,    10,    20,     4,     0,    12,     7,    -7,    11,   -11,   -16,   -13,     7,    11,     8,    -9,   -12,   -20,    -6,     4,     0,    -9,     8,   -14,     9,   -16]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [  -10,     7,    -4,    -7,    -7,    -8,    10,     6,    11,     4,     6,    -3,     5,     5,   -15,    -3,     0,    -5,     1,   -11,     6,    10,     1,     1,     5,    10,     5,    13,    -9,    10,    -5,    -2,     1,    10,    -5,    14,    -3,    -6,    -7,    10,    20,     4,     0,    12,     7,    -7,    11,   -11,   -16,   -13,     7,    11,     8,    -9,   -12,   -20,    -6,     4,     0,    -9,     8,   -14,     9,   -16]
# {OUT} Y_N2 = [  -10,     7,    -4,    -7,    -7,    -8,    10,     6,    11,     4,     6,    -3,     5,     5,   -15,    -3,     0,    -5,     1,   -11,     6,    10,     1,     1,     5,    10,     5,    13,    -9,    10,    -5,    -2,     1,    10,    -5,    14,    -3,    -6,    -7,    10,    20,     4,     0,    12,     7,    -7,    11,   -11,   -16,   -13,     7,    11,     8,    -9,   -12,   -20,    -6,     4,     0,    -9,     8,   -14,     9,   -16]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [  -10,     7,    -4,    -7,    -7,    -8,    10,     6,    11,     4,     6,    -3,     5,     5,   -15,    -3,     0,    -5,     1,   -11,     6,    10,     1,     1,     5,    10,     5,    13,    -9,    10,    -5,    -2,     1,    10,    -5,    14,    -3,    -6,    -7,    10,    20,     4,     0,    12,     7,    -7,    11,   -11,   -16,   -13,     7,    11,     8,    -9,   -12,   -20,    -6,     4,     0,    -9,     8,   -14,     9,   -16]
# {OUT} V_K = [ -128,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,  -128,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,  -128,     0,  -128]
# {OUT} V_K2 = [ -128,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,  -128,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     0,     0,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1]
# {IN}  V = [ -128,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,     0,  -128,     0,     0,  -128,     0,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128,  -128,  -128,     0,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°9)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# {OUT} U_K2 = [    1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# {OUT} X_N = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# {OUT} X_N2 = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# {OUT} X_N2 = [ 1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00]
# {OUT} Y_N = [ 0.70,  0.80, -0.06,  1.57, -0.40,  0.85,  0.20, -1.17,  0.58,  0.20,  1.29, -1.39, -1.11,  0.31,  1.17, -0.50, -0.08, -1.34,  0.18, -0.96, -1.01,  1.41, -0.08, -0.76,  0.04,  1.59,  1.10, -1.22,  1.42,  2.19,  1.84,  0.02,  0.71,  0.00, -1.94,  1.69, -0.59, -0.57, -1.27, -0.19,  1.25, -1.53, -0.82,  0.00, -0.64,  0.22, -0.70,  1.21, -0.41,  1.74,  1.53, -2.29, -1.78,  0.04,  1.17,  1.90,  1.22, -0.70, -0.92, -1.69,  1.49,  1.50, -0.96, -1.42]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 0.70,  0.80, -0.06,  1.57, -0.40,  0.85,  0.20, -1.17,  0.58,  0.20,  1.29, -1.39, -1.11,  0.31,  1.17, -0.50, -0.08, -1.34,  0.18, -0.96, -1.01,  1.41, -0.08, -0.76,  0.04,  1.59,  1.10, -1.22,  1.42,  2.19,  1.84,  0.02,  0.71,  0.00, -1.94,  1.69, -0.59, -0.57, -1.27, -0.19,  1.25, -1.53, -0.82,  0.00, -0.64,  0.22, -0.70,  1.21, -0.41,  1.74,  1.53, -2.29, -1.78,  0.04,  1.17,  1.90,  1.22, -0.70, -0.92, -1.69,  1.49,  1.50, -0.96, -1.42]
# {OUT} Y_N2 = [ 0.70,  0.80, -0.06,  1.57, -0.40,  0.85,  0.20, -1.17,  0.58,  0.20,  1.29, -1.39, -1.11,  0.31,  1.17, -0.50, -0.08, -1.34,  0.18, -0.96, -1.01,  1.41, -0.08, -0.76,  0.04,  1.59,  1.10, -1.22,  1.42,  2.19,  1.84,  0.02,  0.71,  0.00, -1.94,  1.69, -0.59, -0.57, -1.27, -0.19,  1.25, -1.53, -0.82,  0.00, -0.64,  0.22, -0.70,  1.21, -0.41,  1.74,  1.53, -2.29, -1.78,  0.04,  1.17,  1.90,  1.22, -0.70, -0.92, -1.69,  1.49,  1.50, -0.96, -1.42]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 0.70,  0.80, -0.06,  1.57, -0.40,  0.85,  0.20, -1.17,  0.58,  0.20,  1.29, -1.39, -1.11,  0.31,  1.17, -0.50, -0.08, -1.34,  0.18, -0.96, -1.01,  1.41, -0.08, -0.76,  0.04,  1.59,  1.10, -1.22,  1.42,  2.19,  1.84,  0.02,  0.71,  0.00, -1.94,  1.69, -0.59, -0.57, -1.27, -0.19,  1.25, -1.53, -0.82,  0.00, -0.64,  0.22, -0.70,  1.21, -0.41,  1.74,  1.53, -2.29, -1.78,  0.04,  1.17,  1.90,  1.22, -0.70, -0.92, -1.69,  1.49,  1.50, -0.96, -1.42]
# {OUT} Y_N2 = [ 2.67,  3.04, -0.22,  5.98, -1.52,  3.23,  0.78, -4.49,  2.22,  0.77,  4.94, -5.33, -4.25,  1.17,  4.49, -1.90, -0.31, -5.10,  0.69, -3.68, -3.87,  5.37, -0.29, -2.89,  0.13,  6.06,  4.21, -4.67,  5.41,  8.35,  7.03,  0.08,  2.71,  0.01, -7.40,  6.47, -2.27, -2.19, -4.83, -0.74,  4.79, -5.86, -3.13,  0.01, -2.43,  0.84, -2.67,  4.60, -1.58,  6.63,  5.83, -8.73, -6.81,  0.15,  4.46,  7.26,  4.66, -2.67, -3.53, -6.47,  5.68,  5.72, -3.68, -5.44]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 2.67,  3.04, -0.22,  5.98, -1.52,  3.23,  0.78, -4.49,  2.22,  0.77,  4.94, -5.33, -4.25,  1.17,  4.49, -1.90, -0.31, -5.10,  0.69, -3.68, -3.87,  5.37, -0.29, -2.89,  0.13,  6.06,  4.21, -4.67,  5.41,  8.35,  7.03,  0.08,  2.71,  0.01, -7.40,  6.47, -2.27, -2.19, -4.83, -0.74,  4.79, -5.86, -3.13,  0.01, -2.43,  0.84, -2.67,  4.60, -1.58,  6.63,  5.83, -8.73, -6.81,  0.15,  4.46,  7.26,  4.66, -2.67, -3.53, -6.47,  5.68,  5.72, -3.68, -5.44]
# {OUT} Y_N2 = [    5,     6,     0,    12,    -3,     6,     2,    -9,     4,     2,    10,   -11,    -9,     2,     9,    -4,    -1,   -10,     1,    -7,    -8,    11,    -1,    -6,     0,    12,     8,    -9,    11,    17,    14,     0,     5,     0,   -15,    13,    -5,    -4,   -10,    -1,    10,   -12,    -6,     0,    -5,     2,    -5,     9,    -3,    13,    12,   -17,   -14,     0,     9,    15,     9,    -5,    -7,   -13,    11,    11,    -7,   -11]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [    5,     6,     0,    12,    -3,     6,     2,    -9,     4,     2,    10,   -11,    -9,     2,     9,    -4,    -1,   -10,     1,    -7,    -8,    11,    -1,    -6,     0,    12,     8,    -9,    11,    17,    14,     0,     5,     0,   -15,    13,    -5,    -4,   -10,    -1,    10,   -12,    -6,     0,    -5,     2,    -5,     9,    -3,    13,    12,   -17,   -14,     0,     9,    15,     9,    -5,    -7,   -13,    11,    11,    -7,   -11]
# {OUT} Y_N2 = [    5,     6,     0,    12,    -3,     6,     2,    -9,     4,     2,    10,   -11,    -9,     2,     9,    -4,    -1,   -10,     1,    -7,    -8,    11,    -1,    -6,     0,    12,     8,    -9,    11,    17,    14,     0,     5,     0,   -15,    13,    -5,    -4,   -10,    -1,    10,   -12,    -6,     0,    -5,     2,    -5,     9,    -3,    13,    12,   -17,   -14,     0,     9,    15,     9,    -5,    -7,   -13,    11,    11,    -7,   -11]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [    5,     6,     0,    12,    -3,     6,     2,    -9,     4,     2,    10,   -11,    -9,     2,     9,    -4,    -1,   -10,     1,    -7,    -8,    11,    -1,    -6,     0,    12,     8,    -9,    11,    17,    14,     0,     5,     0,   -15,    13,    -5,    -4,   -10,    -1,    10,   -12,    -6,     0,    -5,     2,    -5,     9,    -3,    13,    12,   -17,   -14,     0,     9,    15,     9,    -5,    -7,   -13,    11,    11,    -7,   -11]
# {OUT} V_K = [ -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128]
# {OUT} V_K2 = [ -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     1]
# {IN}  V = [ -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,  -128,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°10)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# {OUT} U_K2 = [    0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# {OUT} X_N = [    0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# {OUT} X_N2 = [    0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# {OUT} X_N2 = [ 1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00]
# {OUT} Y_N = [ 1.34,  1.20, -2.26,  0.56,  2.71, -0.93, -0.70,  0.07,  0.55,  2.40,  1.10, -1.43,  1.88,  0.73,  0.93,  1.68, -1.33,  0.57,  1.46, -1.39, -0.02, -0.83, -0.93,  0.30, -1.89,  1.30, -0.30, -0.67,  0.71, -1.91,  3.02, -0.81, -0.01,  1.44, -0.73,  0.87,  0.26, -1.20,  1.40,  1.62,  0.32,  1.26,  1.03, -1.03,  2.43,  1.68, -1.09,  2.07,  1.75,  1.05,  2.74, -2.29, -0.23, -1.70, -0.26,  0.49,  1.07, -1.36, -0.85, -1.31, -1.60, -1.17, -1.50, -1.46]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.34,  1.20, -2.26,  0.56,  2.71, -0.93, -0.70,  0.07,  0.55,  2.40,  1.10, -1.43,  1.88,  0.73,  0.93,  1.68, -1.33,  0.57,  1.46, -1.39, -0.02, -0.83, -0.93,  0.30, -1.89,  1.30, -0.30, -0.67,  0.71, -1.91,  3.02, -0.81, -0.01,  1.44, -0.73,  0.87,  0.26, -1.20,  1.40,  1.62,  0.32,  1.26,  1.03, -1.03,  2.43,  1.68, -1.09,  2.07,  1.75,  1.05,  2.74, -2.29, -0.23, -1.70, -0.26,  0.49,  1.07, -1.36, -0.85, -1.31, -1.60, -1.17, -1.50, -1.46]
# {OUT} Y_N2 = [ 1.34,  1.20, -2.26,  0.56,  2.71, -0.93, -0.70,  0.07,  0.55,  2.40,  1.10, -1.43,  1.88,  0.73,  0.93,  1.68, -1.33,  0.57,  1.46, -1.39, -0.02, -0.83, -0.93,  0.30, -1.89,  1.30, -0.30, -0.67,  0.71, -1.91,  3.02, -0.81, -0.01,  1.44, -0.73,  0.87,  0.26, -1.20,  1.40,  1.62,  0.32,  1.26,  1.03, -1.03,  2.43,  1.68, -1.09,  2.07,  1.75,  1.05,  2.74, -2.29, -0.23, -1.70, -0.26,  0.49,  1.07, -1.36, -0.85, -1.31, -1.60, -1.17, -1.50, -1.46]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.34,  1.20, -2.26,  0.56,  2.71, -0.93, -0.70,  0.07,  0.55,  2.40,  1.10, -1.43,  1.88,  0.73,  0.93,  1.68, -1.33,  0.57,  1.46, -1.39, -0.02, -0.83, -0.93,  0.30, -1.89,  1.30, -0.30, -0.67,  0.71, -1.91,  3.02, -0.81, -0.01,  1.44, -0.73,  0.87,  0.26, -1.20,  1.40,  1.62,  0.32,  1.26,  1.03, -1.03,  2.43,  1.68, -1.09,  2.07,  1.75,  1.05,  2.74, -2.29, -0.23, -1.70, -0.26,  0.49,  1.07, -1.36, -0.85, -1.31, -1.60, -1.17, -1.50, -1.46]
# {OUT} Y_N2 = [ 5.11,  4.59, -8.63,  2.13, 10.36, -3.56, -2.66,  0.26,  2.11,  9.17,  4.21, -5.44,  7.17,  2.80,  3.55,  6.40, -5.07,  2.19,  5.58, -5.29, -0.08, -3.15, -3.55,  1.15, -7.24,  4.95, -1.16, -2.57,  2.72, -7.29, 11.53, -3.09, -0.05,  5.50, -2.80,  3.30,  1.00, -4.60,  5.35,  6.18,  1.23,  4.83,  3.94, -3.92,  9.27,  6.42, -4.18,  7.90,  6.68,  4.00, 10.45, -8.75, -0.87, -6.49, -0.98,  1.88,  4.09, -5.21, -3.24, -5.00, -6.10, -4.48, -5.72, -5.57]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 5.11,  4.59, -8.63,  2.13, 10.36, -3.56, -2.66,  0.26,  2.11,  9.17,  4.21, -5.44,  7.17,  2.80,  3.55,  6.40, -5.07,  2.19,  5.58, -5.29, -0.08, -3.15, -3.55,  1.15, -7.24,  4.95, -1.16, -2.57,  2.72, -7.29, 11.53, -3.09, -0.05,  5.50, -2.80,  3.30,  1.00, -4.60,  5.35,  6.18,  1.23,  4.83,  3.94, -3.92,  9.27,  6.42, -4.18,  7.90,  6.68,  4.00, 10.45, -8.75, -0.87, -6.49, -0.98,  1.88,  4.09, -5.21, -3.24, -5.00, -6.10, -4.48, -5.72, -5.57]
# {OUT} Y_N2 = [   10,     9,   -17,     4,    21,    -7,    -5,     1,     4,    18,     8,   -11,    14,     6,     7,    13,   -10,     4,    11,   -11,     0,    -6,    -7,     2,   -14,    10,    -2,    -5,     5,   -15,    23,    -6,     0,    11,    -6,     7,     2,    -9,    11,    12,     2,    10,     8,    -8,    19,    13,    -8,    16,    13,     8,    21,   -18,    -2,   -13,    -2,     4,     8,   -10,    -6,   -10,   -12,    -9,   -11,   -11]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   10,     9,   -17,     4,    21,    -7,    -5,     1,     4,    18,     8,   -11,    14,     6,     7,    13,   -10,     4,    11,   -11,     0,    -6,    -7,     2,   -14,    10,    -2,    -5,     5,   -15,    23,    -6,     0,    11,    -6,     7,     2,    -9,    11,    12,     2,    10,     8,    -8,    19,    13,    -8,    16,    13,     8,    21,   -18,    -2,   -13,    -2,     4,     8,   -10,    -6,   -10,   -12,    -9,   -11,   -11]
# {OUT} Y_N2 = [   10,     9,   -17,     4,    21,    -7,    -5,     1,     4,    18,     8,   -11,    14,     6,     7,    13,   -10,     4,    11,   -11,     0,    -6,    -7,     2,   -14,    10,    -2,    -5,     5,   -15,    23,    -6,     0,    11,    -6,     7,     2,    -9,    11,    12,     2,    10,     8,    -8,    19,    13,    -8,    16,    13,     8,    21,   -18,    -2,   -13,    -2,     4,     8,   -10,    -6,   -10,   -12,    -9,   -11,   -11]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   10,     9,   -17,     4,    21,    -7,    -5,     1,     4,    18,     8,   -11,    14,     6,     7,    13,   -10,     4,    11,   -11,     0,    -6,    -7,     2,   -14,    10,    -2,    -5,     5,   -15,    23,    -6,     0,    11,    -6,     7,     2,    -9,    11,    12,     2,    10,     8,    -8,    19,    13,    -8,    16,    13,     8,    21,   -18,    -2,   -13,    -2,     4,     8,   -10,    -6,   -10,   -12,    -9,   -11,   -11]
# {OUT} V_K = [    0,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# {OUT} V_K2 = [    0,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     0,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1]
# {IN}  V = [    0,     0,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°11)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# {OUT} U_K2 = [    1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# {OUT} X_N = [    1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# {OUT} X_N2 = [    1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     1,     1,     0,     1,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# {OUT} X_N2 = [-1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00]
# {OUT} Y_N = [-0.46,  1.03,  0.95,  2.96, -0.95,  1.81,  0.50,  1.26, -1.29, -0.53, -1.38,  0.32, -1.02,  1.46, -1.44,  0.46,  0.75,  0.07,  0.61,  0.14, -0.32,  0.68,  1.96, -1.83, -1.70, -1.16,  1.50, -0.98,  0.62,  0.29,  1.83, -1.46,  1.88,  0.09,  0.90,  1.55,  1.61, -1.55,  1.43, -1.01, -0.30,  1.18,  1.57, -0.77, -1.24,  0.62,  1.36, -1.13, -1.53, -2.32,  0.06,  0.29,  1.30,  0.80,  1.56,  0.71, -0.96,  1.88, -2.37,  0.31,  1.04,  1.62, -1.24, -1.75]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.46,  1.03,  0.95,  2.96, -0.95,  1.81,  0.50,  1.26, -1.29, -0.53, -1.38,  0.32, -1.02,  1.46, -1.44,  0.46,  0.75,  0.07,  0.61,  0.14, -0.32,  0.68,  1.96, -1.83, -1.70, -1.16,  1.50, -0.98,  0.62,  0.29,  1.83, -1.46,  1.88,  0.09,  0.90,  1.55,  1.61, -1.55,  1.43, -1.01, -0.30,  1.18,  1.57, -0.77, -1.24,  0.62,  1.36, -1.13, -1.53, -2.32,  0.06,  0.29,  1.30,  0.80,  1.56,  0.71, -0.96,  1.88, -2.37,  0.31,  1.04,  1.62, -1.24, -1.75]
# {OUT} Y_N2 = [-0.46,  1.03,  0.95,  2.96, -0.95,  1.81,  0.50,  1.26, -1.29, -0.53, -1.38,  0.32, -1.02,  1.46, -1.44,  0.46,  0.75,  0.07,  0.61,  0.14, -0.32,  0.68,  1.96, -1.83, -1.70, -1.16,  1.50, -0.98,  0.62,  0.29,  1.83, -1.46,  1.88,  0.09,  0.90,  1.55,  1.61, -1.55,  1.43, -1.01, -0.30,  1.18,  1.57, -0.77, -1.24,  0.62,  1.36, -1.13, -1.53, -2.32,  0.06,  0.29,  1.30,  0.80,  1.56,  0.71, -0.96,  1.88, -2.37,  0.31,  1.04,  1.62, -1.24, -1.75]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.46,  1.03,  0.95,  2.96, -0.95,  1.81,  0.50,  1.26, -1.29, -0.53, -1.38,  0.32, -1.02,  1.46, -1.44,  0.46,  0.75,  0.07,  0.61,  0.14, -0.32,  0.68,  1.96, -1.83, -1.70, -1.16,  1.50, -0.98,  0.62,  0.29,  1.83, -1.46,  1.88,  0.09,  0.90,  1.55,  1.61, -1.55,  1.43, -1.01, -0.30,  1.18,  1.57, -0.77, -1.24,  0.62,  1.36, -1.13, -1.53, -2.32,  0.06,  0.29,  1.30,  0.80,  1.56,  0.71, -0.96,  1.88, -2.37,  0.31,  1.04,  1.62, -1.24, -1.75]
# {OUT} Y_N2 = [-1.74,  3.92,  3.64, 11.29, -3.64,  6.90,  1.92,  4.81, -4.93, -2.03, -5.29,  1.22, -3.91,  5.57, -5.50,  1.74,  2.86,  0.25,  2.33,  0.54, -1.24,  2.61,  7.50, -6.98, -6.48, -4.45,  5.74, -3.74,  2.36,  1.12,  6.98, -5.58,  7.19,  0.36,  3.46,  5.94,  6.16, -5.91,  5.45, -3.87, -1.13,  4.49,  6.01, -2.93, -4.72,  2.36,  5.20, -4.33, -5.83, -8.85,  0.22,  1.10,  4.96,  3.07,  5.97,  2.71, -3.68,  7.19, -9.05,  1.18,  3.96,  6.20, -4.74, -6.70]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-1.74,  3.92,  3.64, 11.29, -3.64,  6.90,  1.92,  4.81, -4.93, -2.03, -5.29,  1.22, -3.91,  5.57, -5.50,  1.74,  2.86,  0.25,  2.33,  0.54, -1.24,  2.61,  7.50, -6.98, -6.48, -4.45,  5.74, -3.74,  2.36,  1.12,  6.98, -5.58,  7.19,  0.36,  3.46,  5.94,  6.16, -5.91,  5.45, -3.87, -1.13,  4.49,  6.01, -2.93, -4.72,  2.36,  5.20, -4.33, -5.83, -8.85,  0.22,  1.10,  4.96,  3.07,  5.97,  2.71, -3.68,  7.19, -9.05,  1.18,  3.96,  6.20, -4.74, -6.70]
# {OUT} Y_N2 = [   -3,     8,     7,    23,    -7,    14,     4,    10,   -10,    -4,   -11,     2,    -8,    11,   -11,     3,     6,     1,     5,     1,    -2,     5,    15,   -14,   -13,    -9,    11,    -7,     5,     2,    14,   -11,    14,     1,     7,    12,    12,   -12,    11,    -8,    -2,     9,    12,    -6,    -9,     5,    10,    -9,   -12,   -18,     0,     2,    10,     6,    12,     5,    -7,    14,   -18,     2,     8,    12,    -9,   -13]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -3,     8,     7,    23,    -7,    14,     4,    10,   -10,    -4,   -11,     2,    -8,    11,   -11,     3,     6,     1,     5,     1,    -2,     5,    15,   -14,   -13,    -9,    11,    -7,     5,     2,    14,   -11,    14,     1,     7,    12,    12,   -12,    11,    -8,    -2,     9,    12,    -6,    -9,     5,    10,    -9,   -12,   -18,     0,     2,    10,     6,    12,     5,    -7,    14,   -18,     2,     8,    12,    -9,   -13]
# {OUT} Y_N2 = [   -3,     8,     7,    23,    -7,    14,     4,    10,   -10,    -4,   -11,     2,    -8,    11,   -11,     3,     6,     1,     5,     1,    -2,     5,    15,   -14,   -13,    -9,    11,    -7,     5,     2,    14,   -11,    14,     1,     7,    12,    12,   -12,    11,    -8,    -2,     9,    12,    -6,    -9,     5,    10,    -9,   -12,   -18,     0,     2,    10,     6,    12,     5,    -7,    14,   -18,     2,     8,    12,    -9,   -13]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -3,     8,     7,    23,    -7,    14,     4,    10,   -10,    -4,   -11,     2,    -8,    11,   -11,     3,     6,     1,     5,     1,    -2,     5,    15,   -14,   -13,    -9,    11,    -7,     5,     2,    14,   -11,    14,     1,     7,    12,    12,   -12,    11,    -8,    -2,     9,    12,    -6,    -9,     5,    10,    -9,   -12,   -18,     0,     2,    10,     6,    12,     5,    -7,    14,   -18,     2,     8,    12,    -9,   -13]
# {OUT} V_K = [ -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128]
# {OUT} V_K2 = [ -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1]
# {IN}  V = [ -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°12)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# {OUT} U_K2 = [    1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# {OUT} X_N = [    1,     0,     1,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     1,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# {OUT} X_N2 = [    1,     0,     1,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     1,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     0,     1,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# {OUT} X_N2 = [-1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00]
# {OUT} Y_N = [-1.08,  1.04, -2.42, -0.02, -1.82,  0.36,  1.72,  1.54,  0.18, -1.26, -0.57, -2.24, -0.97, -1.67,  2.03, -0.31, -0.25, -1.35, -0.62, -1.43, -1.77,  0.64,  1.84,  0.22, -0.81, -0.33, -0.93,  0.32, -1.41,  1.38,  0.43,  0.38,  1.19, -0.46,  0.56,  1.11, -0.24, -1.07, -0.33, -0.34,  1.75, -0.57, -1.81, -0.40,  0.03, -1.28,  2.12, -1.23, -0.59,  1.30,  1.50,  1.90,  0.65, -0.72, -0.05, -0.81, -1.74, -0.70, -1.29,  0.34, -0.52,  1.42,  0.36,  1.50]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.08,  1.04, -2.42, -0.02, -1.82,  0.36,  1.72,  1.54,  0.18, -1.26, -0.57, -2.24, -0.97, -1.67,  2.03, -0.31, -0.25, -1.35, -0.62, -1.43, -1.77,  0.64,  1.84,  0.22, -0.81, -0.33, -0.93,  0.32, -1.41,  1.38,  0.43,  0.38,  1.19, -0.46,  0.56,  1.11, -0.24, -1.07, -0.33, -0.34,  1.75, -0.57, -1.81, -0.40,  0.03, -1.28,  2.12, -1.23, -0.59,  1.30,  1.50,  1.90,  0.65, -0.72, -0.05, -0.81, -1.74, -0.70, -1.29,  0.34, -0.52,  1.42,  0.36,  1.50]
# {OUT} Y_N2 = [-1.08,  1.04, -2.42, -0.02, -1.82,  0.36,  1.72,  1.54,  0.18, -1.26, -0.57, -2.24, -0.97, -1.67,  2.03, -0.31, -0.25, -1.35, -0.62, -1.43, -1.77,  0.64,  1.84,  0.22, -0.81, -0.33, -0.93,  0.32, -1.41,  1.38,  0.43,  0.38,  1.19, -0.46,  0.56,  1.11, -0.24, -1.07, -0.33, -0.34,  1.75, -0.57, -1.81, -0.40,  0.03, -1.28,  2.12, -1.23, -0.59,  1.30,  1.50,  1.90,  0.65, -0.72, -0.05, -0.81, -1.74, -0.70, -1.29,  0.34, -0.52,  1.42,  0.36,  1.50]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.08,  1.04, -2.42, -0.02, -1.82,  0.36,  1.72,  1.54,  0.18, -1.26, -0.57, -2.24, -0.97, -1.67,  2.03, -0.31, -0.25, -1.35, -0.62, -1.43, -1.77,  0.64,  1.84,  0.22, -0.81, -0.33, -0.93,  0.32, -1.41,  1.38,  0.43,  0.38,  1.19, -0.46,  0.56,  1.11, -0.24, -1.07, -0.33, -0.34,  1.75, -0.57, -1.81, -0.40,  0.03, -1.28,  2.12, -1.23, -0.59,  1.30,  1.50,  1.90,  0.65, -0.72, -0.05, -0.81, -1.74, -0.70, -1.29,  0.34, -0.52,  1.42,  0.36,  1.50]
# {OUT} Y_N2 = [-4.12,  3.98, -9.26, -0.09, -6.94,  1.38,  6.56,  5.89,  0.69, -4.81, -2.16, -8.54, -3.70, -6.40,  7.75, -1.18, -0.96, -5.16, -2.37, -5.47, -6.77,  2.44,  7.03,  0.85, -3.10, -1.25, -3.54,  1.23, -5.38,  5.28,  1.64,  1.47,  4.56, -1.77,  2.13,  4.23, -0.93, -4.07, -1.27, -1.29,  6.70, -2.19, -6.90, -1.54,  0.11, -4.88,  8.10, -4.70, -2.24,  4.98,  5.74,  7.27,  2.46, -2.74, -0.20, -3.10, -6.63, -2.68, -4.93,  1.30, -1.98,  5.41,  1.36,  5.72]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-4.12,  3.98, -9.26, -0.09, -6.94,  1.38,  6.56,  5.89,  0.69, -4.81, -2.16, -8.54, -3.70, -6.40,  7.75, -1.18, -0.96, -5.16, -2.37, -5.47, -6.77,  2.44,  7.03,  0.85, -3.10, -1.25, -3.54,  1.23, -5.38,  5.28,  1.64,  1.47,  4.56, -1.77,  2.13,  4.23, -0.93, -4.07, -1.27, -1.29,  6.70, -2.19, -6.90, -1.54,  0.11, -4.88,  8.10, -4.70, -2.24,  4.98,  5.74,  7.27,  2.46, -2.74, -0.20, -3.10, -6.63, -2.68, -4.93,  1.30, -1.98,  5.41,  1.36,  5.72]
# {OUT} Y_N2 = [   -8,     8,   -19,     0,   -14,     3,    13,    12,     1,   -10,    -4,   -17,    -7,   -13,    16,    -2,    -2,   -10,    -5,   -11,   -14,     5,    14,     2,    -6,    -2,    -7,     2,   -11,    11,     3,     3,     9,    -4,     4,     8,    -2,    -8,    -3,    -3,    13,    -4,   -14,    -3,     0,   -10,    16,    -9,    -4,    10,    11,    15,     5,    -5,     0,    -6,   -13,    -5,   -10,     3,    -4,    11,     3,    11]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -8,     8,   -19,     0,   -14,     3,    13,    12,     1,   -10,    -4,   -17,    -7,   -13,    16,    -2,    -2,   -10,    -5,   -11,   -14,     5,    14,     2,    -6,    -2,    -7,     2,   -11,    11,     3,     3,     9,    -4,     4,     8,    -2,    -8,    -3,    -3,    13,    -4,   -14,    -3,     0,   -10,    16,    -9,    -4,    10,    11,    15,     5,    -5,     0,    -6,   -13,    -5,   -10,     3,    -4,    11,     3,    11]
# {OUT} Y_N2 = [   -8,     8,   -19,     0,   -14,     3,    13,    12,     1,   -10,    -4,   -17,    -7,   -13,    16,    -2,    -2,   -10,    -5,   -11,   -14,     5,    14,     2,    -6,    -2,    -7,     2,   -11,    11,     3,     3,     9,    -4,     4,     8,    -2,    -8,    -3,    -3,    13,    -4,   -14,    -3,     0,   -10,    16,    -9,    -4,    10,    11,    15,     5,    -5,     0,    -6,   -13,    -5,   -10,     3,    -4,    11,     3,    11]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -8,     8,   -19,     0,   -14,     3,    13,    12,     1,   -10,    -4,   -17,    -7,   -13,    16,    -2,    -2,   -10,    -5,   -11,   -14,     5,    14,     2,    -6,    -2,    -7,     2,   -11,    11,     3,     3,     9,    -4,     4,     8,    -2,    -8,    -3,    -3,    13,    -4,   -14,    -3,     0,   -10,    16,    -9,    -4,    10,    11,    15,     5,    -5,     0,    -6,   -13,    -5,   -10,     3,    -4,    11,     3,    11]
# {OUT} V_K = [ -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0]
# {OUT} V_K2 = [ -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     0,     0]
# {IN}  V = [ -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,     0,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°13)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# {OUT} U_K2 = [    1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# {OUT} X_N = [    1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# {OUT} X_N2 = [    1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     0,     1,     0,     1,     0,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# {OUT} X_N2 = [-1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00]
# {OUT} Y_N = [-1.34,  1.80,  1.35,  0.04,  0.41, -0.32, -0.35, -0.14, -2.15,  0.84, -0.90, -0.91,  1.49, -1.72,  1.21, -1.65,  0.92, -0.73, -1.54,  0.01,  0.70, -0.16, -0.56, -0.91, -1.70, -1.13,  0.21,  1.32, -0.49,  1.84, -1.46,  0.45,  0.26, -1.71, -0.01,  0.99,  0.02,  0.75, -0.40,  0.97, -0.68,  1.86,  1.21,  0.27,  0.46,  1.60, -0.19, -0.01, -1.09, -0.18, -0.26,  0.52, -0.17, -2.31, -0.60,  0.06,  1.15, -1.07,  0.14,  1.47, -0.17, -1.28,  1.51, -1.65]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.34,  1.80,  1.35,  0.04,  0.41, -0.32, -0.35, -0.14, -2.15,  0.84, -0.90, -0.91,  1.49, -1.72,  1.21, -1.65,  0.92, -0.73, -1.54,  0.01,  0.70, -0.16, -0.56, -0.91, -1.70, -1.13,  0.21,  1.32, -0.49,  1.84, -1.46,  0.45,  0.26, -1.71, -0.01,  0.99,  0.02,  0.75, -0.40,  0.97, -0.68,  1.86,  1.21,  0.27,  0.46,  1.60, -0.19, -0.01, -1.09, -0.18, -0.26,  0.52, -0.17, -2.31, -0.60,  0.06,  1.15, -1.07,  0.14,  1.47, -0.17, -1.28,  1.51, -1.65]
# {OUT} Y_N2 = [-1.34,  1.80,  1.35,  0.04,  0.41, -0.32, -0.35, -0.14, -2.15,  0.84, -0.90, -0.91,  1.49, -1.72,  1.21, -1.65,  0.92, -0.73, -1.54,  0.01,  0.70, -0.16, -0.56, -0.91, -1.70, -1.13,  0.21,  1.32, -0.49,  1.84, -1.46,  0.45,  0.26, -1.71, -0.01,  0.99,  0.02,  0.75, -0.40,  0.97, -0.68,  1.86,  1.21,  0.27,  0.46,  1.60, -0.19, -0.01, -1.09, -0.18, -0.26,  0.52, -0.17, -2.31, -0.60,  0.06,  1.15, -1.07,  0.14,  1.47, -0.17, -1.28,  1.51, -1.65]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.34,  1.80,  1.35,  0.04,  0.41, -0.32, -0.35, -0.14, -2.15,  0.84, -0.90, -0.91,  1.49, -1.72,  1.21, -1.65,  0.92, -0.73, -1.54,  0.01,  0.70, -0.16, -0.56, -0.91, -1.70, -1.13,  0.21,  1.32, -0.49,  1.84, -1.46,  0.45,  0.26, -1.71, -0.01,  0.99,  0.02,  0.75, -0.40,  0.97, -0.68,  1.86,  1.21,  0.27,  0.46,  1.60, -0.19, -0.01, -1.09, -0.18, -0.26,  0.52, -0.17, -2.31, -0.60,  0.06,  1.15, -1.07,  0.14,  1.47, -0.17, -1.28,  1.51, -1.65]
# {OUT} Y_N2 = [-5.11,  6.88,  5.16,  0.14,  1.57, -1.24, -1.33, -0.55, -8.20,  3.19, -3.44, -3.46,  5.69, -6.58,  4.60, -6.29,  3.50, -2.78, -5.89,  0.05,  2.69, -0.62, -2.14, -3.48, -6.48, -4.33,  0.81,  5.04, -1.86,  7.03, -5.58,  1.73,  1.00, -6.51, -0.02,  3.79,  0.09,  2.88, -1.54,  3.70, -2.58,  7.12,  4.64,  1.04,  1.76,  6.12, -0.73, -0.04, -4.16, -0.68, -0.99,  1.97, -0.66, -8.83, -2.31,  0.24,  4.40, -4.07,  0.54,  5.61, -0.64, -4.88,  5.78, -6.31]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-5.11,  6.88,  5.16,  0.14,  1.57, -1.24, -1.33, -0.55, -8.20,  3.19, -3.44, -3.46,  5.69, -6.58,  4.60, -6.29,  3.50, -2.78, -5.89,  0.05,  2.69, -0.62, -2.14, -3.48, -6.48, -4.33,  0.81,  5.04, -1.86,  7.03, -5.58,  1.73,  1.00, -6.51, -0.02,  3.79,  0.09,  2.88, -1.54,  3.70, -2.58,  7.12,  4.64,  1.04,  1.76,  6.12, -0.73, -0.04, -4.16, -0.68, -0.99,  1.97, -0.66, -8.83, -2.31,  0.24,  4.40, -4.07,  0.54,  5.61, -0.64, -4.88,  5.78, -6.31]
# {OUT} Y_N2 = [  -10,    14,    10,     0,     3,    -2,    -3,    -1,   -16,     6,    -7,    -7,    11,   -13,     9,   -13,     7,    -6,   -12,     0,     5,    -1,    -4,    -7,   -13,    -9,     2,    10,    -4,    14,   -11,     3,     2,   -13,     0,     8,     0,     6,    -3,     7,    -5,    14,     9,     2,     4,    12,    -1,     0,    -8,    -1,    -2,     4,    -1,   -18,    -5,     0,     9,    -8,     1,    11,    -1,   -10,    12,   -13]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [  -10,    14,    10,     0,     3,    -2,    -3,    -1,   -16,     6,    -7,    -7,    11,   -13,     9,   -13,     7,    -6,   -12,     0,     5,    -1,    -4,    -7,   -13,    -9,     2,    10,    -4,    14,   -11,     3,     2,   -13,     0,     8,     0,     6,    -3,     7,    -5,    14,     9,     2,     4,    12,    -1,     0,    -8,    -1,    -2,     4,    -1,   -18,    -5,     0,     9,    -8,     1,    11,    -1,   -10,    12,   -13]
# {OUT} Y_N2 = [  -10,    14,    10,     0,     3,    -2,    -3,    -1,   -16,     6,    -7,    -7,    11,   -13,     9,   -13,     7,    -6,   -12,     0,     5,    -1,    -4,    -7,   -13,    -9,     2,    10,    -4,    14,   -11,     3,     2,   -13,     0,     8,     0,     6,    -3,     7,    -5,    14,     9,     2,     4,    12,    -1,     0,    -8,    -1,    -2,     4,    -1,   -18,    -5,     0,     9,    -8,     1,    11,    -1,   -10,    12,   -13]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [  -10,    14,    10,     0,     3,    -2,    -3,    -1,   -16,     6,    -7,    -7,    11,   -13,     9,   -13,     7,    -6,   -12,     0,     5,    -1,    -4,    -7,   -13,    -9,     2,    10,    -4,    14,   -11,     3,     2,   -13,     0,     8,     0,     6,    -3,     7,    -5,    14,     9,     2,     4,    12,    -1,     0,    -8,    -1,    -2,     4,    -1,   -18,    -5,     0,     9,    -8,     1,    11,    -1,   -10,    12,   -13]
# {OUT} V_K = [ -128,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,     0,  -128]
# {OUT} V_K2 = [ -128,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     1,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     1]
# {IN}  V = [ -128,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,  -128,     0,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°14)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# {OUT} U_K2 = [    1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# {OUT} X_N = [    0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# {OUT} X_N2 = [    0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# {OUT} X_N2 = [ 1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00]
# {OUT} Y_N = [ 1.08, -2.08,  2.03,  2.19, -1.59,  1.54, -0.33,  1.31,  1.41,  1.71,  1.71,  0.58,  2.05, -2.06,  0.60, -1.43,  1.65,  1.51,  0.95,  1.18,  2.29,  0.62,  1.33, -0.08,  1.53,  0.50,  0.03, -1.12, -0.96, -0.58,  0.06, -0.85, -0.54,  1.07,  1.76, -0.48,  0.65,  1.33,  1.19,  2.18, -1.91, -1.53,  0.76, -1.35, -1.43, -1.41,  0.87, -1.47, -0.28,  1.53, -2.22,  0.35,  1.75,  2.09, -0.73,  0.19,  1.42,  0.38,  0.01, -0.58, -0.49,  1.78, -2.08,  1.57]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.08, -2.08,  2.03,  2.19, -1.59,  1.54, -0.33,  1.31,  1.41,  1.71,  1.71,  0.58,  2.05, -2.06,  0.60, -1.43,  1.65,  1.51,  0.95,  1.18,  2.29,  0.62,  1.33, -0.08,  1.53,  0.50,  0.03, -1.12, -0.96, -0.58,  0.06, -0.85, -0.54,  1.07,  1.76, -0.48,  0.65,  1.33,  1.19,  2.18, -1.91, -1.53,  0.76, -1.35, -1.43, -1.41,  0.87, -1.47, -0.28,  1.53, -2.22,  0.35,  1.75,  2.09, -0.73,  0.19,  1.42,  0.38,  0.01, -0.58, -0.49,  1.78, -2.08,  1.57]
# {OUT} Y_N2 = [ 1.08, -2.08,  2.03,  2.19, -1.59,  1.54, -0.33,  1.31,  1.41,  1.71,  1.71,  0.58,  2.05, -2.06,  0.60, -1.43,  1.65,  1.51,  0.95,  1.18,  2.29,  0.62,  1.33, -0.08,  1.53,  0.50,  0.03, -1.12, -0.96, -0.58,  0.06, -0.85, -0.54,  1.07,  1.76, -0.48,  0.65,  1.33,  1.19,  2.18, -1.91, -1.53,  0.76, -1.35, -1.43, -1.41,  0.87, -1.47, -0.28,  1.53, -2.22,  0.35,  1.75,  2.09, -0.73,  0.19,  1.42,  0.38,  0.01, -0.58, -0.49,  1.78, -2.08,  1.57]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.08, -2.08,  2.03,  2.19, -1.59,  1.54, -0.33,  1.31,  1.41,  1.71,  1.71,  0.58,  2.05, -2.06,  0.60, -1.43,  1.65,  1.51,  0.95,  1.18,  2.29,  0.62,  1.33, -0.08,  1.53,  0.50,  0.03, -1.12, -0.96, -0.58,  0.06, -0.85, -0.54,  1.07,  1.76, -0.48,  0.65,  1.33,  1.19,  2.18, -1.91, -1.53,  0.76, -1.35, -1.43, -1.41,  0.87, -1.47, -0.28,  1.53, -2.22,  0.35,  1.75,  2.09, -0.73,  0.19,  1.42,  0.38,  0.01, -0.58, -0.49,  1.78, -2.08,  1.57]
# {OUT} Y_N2 = [ 4.14, -7.93,  7.76,  8.35, -6.07,  5.89, -1.27,  4.99,  5.38,  6.52,  6.55,  2.22,  7.82, -7.88,  2.30, -5.47,  6.32,  5.76,  3.63,  4.50,  8.75,  2.37,  5.09, -0.32,  5.84,  1.89,  0.13, -4.29, -3.66, -2.23,  0.24, -3.24, -2.05,  4.09,  6.73, -1.82,  2.49,  5.10,  4.56,  8.33, -7.31, -5.84,  2.89, -5.16, -5.46, -5.39,  3.32, -5.63, -1.06,  5.84, -8.46,  1.35,  6.68,  7.99, -2.81,  0.71,  5.44,  1.44,  0.05, -2.22, -1.86,  6.80, -7.94,  6.00]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 4.14, -7.93,  7.76,  8.35, -6.07,  5.89, -1.27,  4.99,  5.38,  6.52,  6.55,  2.22,  7.82, -7.88,  2.30, -5.47,  6.32,  5.76,  3.63,  4.50,  8.75,  2.37,  5.09, -0.32,  5.84,  1.89,  0.13, -4.29, -3.66, -2.23,  0.24, -3.24, -2.05,  4.09,  6.73, -1.82,  2.49,  5.10,  4.56,  8.33, -7.31, -5.84,  2.89, -5.16, -5.46, -5.39,  3.32, -5.63, -1.06,  5.84, -8.46,  1.35,  6.68,  7.99, -2.81,  0.71,  5.44,  1.44,  0.05, -2.22, -1.86,  6.80, -7.94,  6.00]
# {OUT} Y_N2 = [    8,   -16,    16,    17,   -12,    12,    -3,    10,    11,    13,    13,     4,    16,   -16,     5,   -11,    13,    12,     7,     9,    17,     5,    10,    -1,    12,     4,     0,    -9,    -7,    -4,     0,    -6,    -4,     8,    13,    -4,     5,    10,     9,    17,   -15,   -12,     6,   -10,   -11,   -11,     7,   -11,    -2,    12,   -17,     3,    13,    16,    -6,     1,    11,     3,     0,    -4,    -4,    14,   -16,    12]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [    8,   -16,    16,    17,   -12,    12,    -3,    10,    11,    13,    13,     4,    16,   -16,     5,   -11,    13,    12,     7,     9,    17,     5,    10,    -1,    12,     4,     0,    -9,    -7,    -4,     0,    -6,    -4,     8,    13,    -4,     5,    10,     9,    17,   -15,   -12,     6,   -10,   -11,   -11,     7,   -11,    -2,    12,   -17,     3,    13,    16,    -6,     1,    11,     3,     0,    -4,    -4,    14,   -16,    12]
# {OUT} Y_N2 = [    8,   -16,    16,    17,   -12,    12,    -3,    10,    11,    13,    13,     4,    16,   -16,     5,   -11,    13,    12,     7,     9,    17,     5,    10,    -1,    12,     4,     0,    -9,    -7,    -4,     0,    -6,    -4,     8,    13,    -4,     5,    10,     9,    17,   -15,   -12,     6,   -10,   -11,   -11,     7,   -11,    -2,    12,   -17,     3,    13,    16,    -6,     1,    11,     3,     0,    -4,    -4,    14,   -16,    12]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [    8,   -16,    16,    17,   -12,    12,    -3,    10,    11,    13,    13,     4,    16,   -16,     5,   -11,    13,    12,     7,     9,    17,     5,    10,    -1,    12,     4,     0,    -9,    -7,    -4,     0,    -6,    -4,     8,    13,    -4,     5,    10,     9,    17,   -15,   -12,     6,   -10,   -11,   -11,     7,   -11,    -2,    12,   -17,     3,    13,    16,    -6,     1,    11,     3,     0,    -4,    -4,    14,   -16,    12]
# {OUT} V_K = [ -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,  -128,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,  -128,     0]
# {OUT} V_K2 = [ -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,  -128,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     0,     1,     1,     1,     0,     1,     0,     0,     1,     0,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     1,     0]
# {IN}  V = [ -128,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,  -128,  -128,  -128,     0,  -128,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°15)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# {OUT} U_K2 = [    1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# {OUT} X_N = [    0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# {OUT} X_N2 = [    0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     0,     0,     1,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# {OUT} X_N2 = [ 1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00]
# {OUT} Y_N = [ 2.40, -1.16,  0.03,  1.44,  1.14,  0.39,  1.56,  0.50,  1.62, -1.58, -1.07,  0.19,  1.18, -1.38, -2.11, -0.86,  0.74,  1.33, -0.87, -0.06, -2.28,  0.61, -0.25, -0.45,  1.24,  1.47,  1.33, -0.83, -2.00, -1.07,  0.11,  0.12, -1.59,  2.00,  1.21,  1.24, -1.89,  0.69,  0.95, -1.53,  0.64, -0.21,  0.75, -2.12,  1.12,  0.75,  1.77, -1.69, -1.06, -1.08, -0.93, -2.43,  1.44,  0.02, -1.16,  0.03, -0.56,  1.02,  0.67, -0.48, -0.50,  0.97, -1.89,  0.60]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 2.40, -1.16,  0.03,  1.44,  1.14,  0.39,  1.56,  0.50,  1.62, -1.58, -1.07,  0.19,  1.18, -1.38, -2.11, -0.86,  0.74,  1.33, -0.87, -0.06, -2.28,  0.61, -0.25, -0.45,  1.24,  1.47,  1.33, -0.83, -2.00, -1.07,  0.11,  0.12, -1.59,  2.00,  1.21,  1.24, -1.89,  0.69,  0.95, -1.53,  0.64, -0.21,  0.75, -2.12,  1.12,  0.75,  1.77, -1.69, -1.06, -1.08, -0.93, -2.43,  1.44,  0.02, -1.16,  0.03, -0.56,  1.02,  0.67, -0.48, -0.50,  0.97, -1.89,  0.60]
# {OUT} Y_N2 = [ 2.40, -1.16,  0.03,  1.44,  1.14,  0.39,  1.56,  0.50,  1.62, -1.58, -1.07,  0.19,  1.18, -1.38, -2.11, -0.86,  0.74,  1.33, -0.87, -0.06, -2.28,  0.61, -0.25, -0.45,  1.24,  1.47,  1.33, -0.83, -2.00, -1.07,  0.11,  0.12, -1.59,  2.00,  1.21,  1.24, -1.89,  0.69,  0.95, -1.53,  0.64, -0.21,  0.75, -2.12,  1.12,  0.75,  1.77, -1.69, -1.06, -1.08, -0.93, -2.43,  1.44,  0.02, -1.16,  0.03, -0.56,  1.02,  0.67, -0.48, -0.50,  0.97, -1.89,  0.60]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 2.40, -1.16,  0.03,  1.44,  1.14,  0.39,  1.56,  0.50,  1.62, -1.58, -1.07,  0.19,  1.18, -1.38, -2.11, -0.86,  0.74,  1.33, -0.87, -0.06, -2.28,  0.61, -0.25, -0.45,  1.24,  1.47,  1.33, -0.83, -2.00, -1.07,  0.11,  0.12, -1.59,  2.00,  1.21,  1.24, -1.89,  0.69,  0.95, -1.53,  0.64, -0.21,  0.75, -2.12,  1.12,  0.75,  1.77, -1.69, -1.06, -1.08, -0.93, -2.43,  1.44,  0.02, -1.16,  0.03, -0.56,  1.02,  0.67, -0.48, -0.50,  0.97, -1.89,  0.60]
# {OUT} Y_N2 = [ 9.16, -4.43,  0.10,  5.48,  4.35,  1.47,  5.98,  1.91,  6.19, -6.05, -4.09,  0.74,  4.49, -5.27, -8.07, -3.29,  2.82,  5.09, -3.34, -0.22, -8.70,  2.33, -0.95, -1.71,  4.73,  5.61,  5.08, -3.16, -7.64, -4.09,  0.43,  0.45, -6.06,  7.63,  4.62,  4.75, -7.23,  2.63,  3.62, -5.83,  2.46, -0.79,  2.87, -8.11,  4.29,  2.88,  6.78, -6.44, -4.04, -4.14, -3.54, -9.27,  5.51,  0.09, -4.42,  0.12, -2.15,  3.88,  2.55, -1.84, -1.91,  3.72, -7.20,  2.30]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 9.16, -4.43,  0.10,  5.48,  4.35,  1.47,  5.98,  1.91,  6.19, -6.05, -4.09,  0.74,  4.49, -5.27, -8.07, -3.29,  2.82,  5.09, -3.34, -0.22, -8.70,  2.33, -0.95, -1.71,  4.73,  5.61,  5.08, -3.16, -7.64, -4.09,  0.43,  0.45, -6.06,  7.63,  4.62,  4.75, -7.23,  2.63,  3.62, -5.83,  2.46, -0.79,  2.87, -8.11,  4.29,  2.88,  6.78, -6.44, -4.04, -4.14, -3.54, -9.27,  5.51,  0.09, -4.42,  0.12, -2.15,  3.88,  2.55, -1.84, -1.91,  3.72, -7.20,  2.30]
# {OUT} Y_N2 = [   18,    -9,     0,    11,     9,     3,    12,     4,    12,   -12,    -8,     1,     9,   -11,   -16,    -7,     6,    10,    -7,     0,   -17,     5,    -2,    -3,     9,    11,    10,    -6,   -15,    -8,     1,     1,   -12,    15,     9,    10,   -14,     5,     7,   -12,     5,    -2,     6,   -16,     9,     6,    14,   -13,    -8,    -8,    -7,   -19,    11,     0,    -9,     0,    -4,     8,     5,    -4,    -4,     7,   -14,     5]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   18,    -9,     0,    11,     9,     3,    12,     4,    12,   -12,    -8,     1,     9,   -11,   -16,    -7,     6,    10,    -7,     0,   -17,     5,    -2,    -3,     9,    11,    10,    -6,   -15,    -8,     1,     1,   -12,    15,     9,    10,   -14,     5,     7,   -12,     5,    -2,     6,   -16,     9,     6,    14,   -13,    -8,    -8,    -7,   -19,    11,     0,    -9,     0,    -4,     8,     5,    -4,    -4,     7,   -14,     5]
# {OUT} Y_N2 = [   18,    -9,     0,    11,     9,     3,    12,     4,    12,   -12,    -8,     1,     9,   -11,   -16,    -7,     6,    10,    -7,     0,   -17,     5,    -2,    -3,     9,    11,    10,    -6,   -15,    -8,     1,     1,   -12,    15,     9,    10,   -14,     5,     7,   -12,     5,    -2,     6,   -16,     9,     6,    14,   -13,    -8,    -8,    -7,   -19,    11,     0,    -9,     0,    -4,     8,     5,    -4,    -4,     7,   -14,     5]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   18,    -9,     0,    11,     9,     3,    12,     4,    12,   -12,    -8,     1,     9,   -11,   -16,    -7,     6,    10,    -7,     0,   -17,     5,    -2,    -3,     9,    11,    10,    -6,   -15,    -8,     1,     1,   -12,    15,     9,    10,   -14,     5,     7,   -12,     5,    -2,     6,   -16,     9,     6,    14,   -13,    -8,    -8,    -7,   -19,    11,     0,    -9,     0,    -4,     8,     5,    -4,    -4,     7,   -14,     5]
# {OUT} V_K = [ -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0]
# {OUT} V_K2 = [ -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     1,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0]
# {IN}  V = [ -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°16)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# {OUT} U_K2 = [    1,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# {OUT} X_N = [    1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# {OUT} X_N2 = [    1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     1,     0,     1,     1,     0,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# {OUT} X_N2 = [-1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00]
# {OUT} Y_N = [-1.07, -0.54,  0.67, -2.17, -1.92,  0.80,  0.32, -2.28, -1.61, -0.73, -0.16, -0.38, -1.90, -2.22, -0.09, -1.71, -0.35,  1.35,  0.74, -1.27,  0.55,  0.81,  0.50, -0.43, -1.53, -1.96,  1.47,  2.12,  1.12,  0.84, -1.54,  2.19,  0.55,  1.11, -0.21,  0.60,  1.58, -0.40, -1.17, -1.87, -1.25, -0.85,  1.82, -0.12, -1.32,  1.46, -1.66,  0.63, -0.81,  1.27,  0.18, -2.33,  0.44, -0.59,  1.76,  1.78,  1.45,  0.63, -1.79, -0.51, -0.54,  1.54,  1.10,  0.42]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.07, -0.54,  0.67, -2.17, -1.92,  0.80,  0.32, -2.28, -1.61, -0.73, -0.16, -0.38, -1.90, -2.22, -0.09, -1.71, -0.35,  1.35,  0.74, -1.27,  0.55,  0.81,  0.50, -0.43, -1.53, -1.96,  1.47,  2.12,  1.12,  0.84, -1.54,  2.19,  0.55,  1.11, -0.21,  0.60,  1.58, -0.40, -1.17, -1.87, -1.25, -0.85,  1.82, -0.12, -1.32,  1.46, -1.66,  0.63, -0.81,  1.27,  0.18, -2.33,  0.44, -0.59,  1.76,  1.78,  1.45,  0.63, -1.79, -0.51, -0.54,  1.54,  1.10,  0.42]
# {OUT} Y_N2 = [-1.07, -0.54,  0.67, -2.17, -1.92,  0.80,  0.32, -2.28, -1.61, -0.73, -0.16, -0.38, -1.90, -2.22, -0.09, -1.71, -0.35,  1.35,  0.74, -1.27,  0.55,  0.81,  0.50, -0.43, -1.53, -1.96,  1.47,  2.12,  1.12,  0.84, -1.54,  2.19,  0.55,  1.11, -0.21,  0.60,  1.58, -0.40, -1.17, -1.87, -1.25, -0.85,  1.82, -0.12, -1.32,  1.46, -1.66,  0.63, -0.81,  1.27,  0.18, -2.33,  0.44, -0.59,  1.76,  1.78,  1.45,  0.63, -1.79, -0.51, -0.54,  1.54,  1.10,  0.42]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.07, -0.54,  0.67, -2.17, -1.92,  0.80,  0.32, -2.28, -1.61, -0.73, -0.16, -0.38, -1.90, -2.22, -0.09, -1.71, -0.35,  1.35,  0.74, -1.27,  0.55,  0.81,  0.50, -0.43, -1.53, -1.96,  1.47,  2.12,  1.12,  0.84, -1.54,  2.19,  0.55,  1.11, -0.21,  0.60,  1.58, -0.40, -1.17, -1.87, -1.25, -0.85,  1.82, -0.12, -1.32,  1.46, -1.66,  0.63, -0.81,  1.27,  0.18, -2.33,  0.44, -0.59,  1.76,  1.78,  1.45,  0.63, -1.79, -0.51, -0.54,  1.54,  1.10,  0.42]
# {OUT} Y_N2 = [-4.08, -2.08,  2.55, -8.30, -7.33,  3.06,  1.23, -8.71, -6.16, -2.78, -0.63, -1.45, -7.26, -8.48, -0.35, -6.54, -1.33,  5.15,  2.83, -4.87,  2.11,  3.10,  1.91, -1.66, -5.85, -7.50,  5.62,  8.10,  4.29,  3.22, -5.87,  8.38,  2.10,  4.23, -0.79,  2.30,  6.02, -1.52, -4.49, -7.15, -4.77, -3.26,  6.95, -0.45, -5.03,  5.56, -6.35,  2.43, -3.09,  4.86,  0.68, -8.89,  1.67, -2.24,  6.71,  6.82,  5.54,  2.39, -6.85, -1.93, -2.05,  5.87,  4.19,  1.62]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-4.08, -2.08,  2.55, -8.30, -7.33,  3.06,  1.23, -8.71, -6.16, -2.78, -0.63, -1.45, -7.26, -8.48, -0.35, -6.54, -1.33,  5.15,  2.83, -4.87,  2.11,  3.10,  1.91, -1.66, -5.85, -7.50,  5.62,  8.10,  4.29,  3.22, -5.87,  8.38,  2.10,  4.23, -0.79,  2.30,  6.02, -1.52, -4.49, -7.15, -4.77, -3.26,  6.95, -0.45, -5.03,  5.56, -6.35,  2.43, -3.09,  4.86,  0.68, -8.89,  1.67, -2.24,  6.71,  6.82,  5.54,  2.39, -6.85, -1.93, -2.05,  5.87,  4.19,  1.62]
# {OUT} Y_N2 = [   -8,    -4,     5,   -17,   -15,     6,     2,   -17,   -12,    -6,    -1,    -3,   -15,   -17,    -1,   -13,    -3,    10,     6,   -10,     4,     6,     4,    -3,   -12,   -15,    11,    16,     9,     6,   -12,    17,     4,     8,    -2,     5,    12,    -3,    -9,   -14,   -10,    -7,    14,    -1,   -10,    11,   -13,     5,    -6,    10,     1,   -18,     3,    -4,    13,    14,    11,     5,   -14,    -4,    -4,    12,     8,     3]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -8,    -4,     5,   -17,   -15,     6,     2,   -17,   -12,    -6,    -1,    -3,   -15,   -17,    -1,   -13,    -3,    10,     6,   -10,     4,     6,     4,    -3,   -12,   -15,    11,    16,     9,     6,   -12,    17,     4,     8,    -2,     5,    12,    -3,    -9,   -14,   -10,    -7,    14,    -1,   -10,    11,   -13,     5,    -6,    10,     1,   -18,     3,    -4,    13,    14,    11,     5,   -14,    -4,    -4,    12,     8,     3]
# {OUT} Y_N2 = [   -8,    -4,     5,   -17,   -15,     6,     2,   -17,   -12,    -6,    -1,    -3,   -15,   -17,    -1,   -13,    -3,    10,     6,   -10,     4,     6,     4,    -3,   -12,   -15,    11,    16,     9,     6,   -12,    17,     4,     8,    -2,     5,    12,    -3,    -9,   -14,   -10,    -7,    14,    -1,   -10,    11,   -13,     5,    -6,    10,     1,   -18,     3,    -4,    13,    14,    11,     5,   -14,    -4,    -4,    12,     8,     3]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -8,    -4,     5,   -17,   -15,     6,     2,   -17,   -12,    -6,    -1,    -3,   -15,   -17,    -1,   -13,    -3,    10,     6,   -10,     4,     6,     4,    -3,   -12,   -15,    11,    16,     9,     6,   -12,    17,     4,     8,    -2,     5,    12,    -3,    -9,   -14,   -10,    -7,    14,    -1,   -10,    11,   -13,     5,    -6,    10,     1,   -18,     3,    -4,    13,    14,    11,     5,   -14,    -4,    -4,    12,     8,     3]
# {OUT} V_K = [ -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0]
# {OUT} V_K2 = [ -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     0,     0,     0,     0,     1,     0,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     0,     0,     0]
# {IN}  V = [ -128,  -128,     0,     0,     0,     0,  -128,     0,  -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,  -128,  -128,  -128,     0,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°17)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# {OUT} U_K2 = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# {OUT} X_N = [    1,     0,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     0,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# {OUT} X_N2 = [    1,     0,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     0,     1,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     0,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# {OUT} X_N2 = [-1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00]
# {OUT} Y_N = [-0.87,  1.95, -0.72, -2.16,  0.86, -0.26,  0.16,  0.47,  0.87,  1.30,  0.81, -0.82, -1.18, -1.24,  2.01,  1.39, -0.40,  1.89,  1.89,  1.98, -1.76, -1.49, -1.91, -1.15, -0.67,  0.63,  0.20,  0.39, -1.27,  0.92, -0.14,  0.14,  0.29, -0.57,  0.54,  0.97, -0.89,  2.65, -0.58,  1.53,  1.49, -1.54,  0.10,  1.22,  0.63, -1.19,  0.83,  1.84,  0.99,  1.28, -0.17,  2.20, -2.01,  0.58,  0.32,  0.41,  1.10,  1.06,  0.41,  2.13, -0.72, -1.12, -0.25,  1.80]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.87,  1.95, -0.72, -2.16,  0.86, -0.26,  0.16,  0.47,  0.87,  1.30,  0.81, -0.82, -1.18, -1.24,  2.01,  1.39, -0.40,  1.89,  1.89,  1.98, -1.76, -1.49, -1.91, -1.15, -0.67,  0.63,  0.20,  0.39, -1.27,  0.92, -0.14,  0.14,  0.29, -0.57,  0.54,  0.97, -0.89,  2.65, -0.58,  1.53,  1.49, -1.54,  0.10,  1.22,  0.63, -1.19,  0.83,  1.84,  0.99,  1.28, -0.17,  2.20, -2.01,  0.58,  0.32,  0.41,  1.10,  1.06,  0.41,  2.13, -0.72, -1.12, -0.25,  1.80]
# {OUT} Y_N2 = [-0.87,  1.95, -0.72, -2.16,  0.86, -0.26,  0.16,  0.47,  0.87,  1.30,  0.81, -0.82, -1.18, -1.24,  2.01,  1.39, -0.40,  1.89,  1.89,  1.98, -1.76, -1.49, -1.91, -1.15, -0.67,  0.63,  0.20,  0.39, -1.27,  0.92, -0.14,  0.14,  0.29, -0.57,  0.54,  0.97, -0.89,  2.65, -0.58,  1.53,  1.49, -1.54,  0.10,  1.22,  0.63, -1.19,  0.83,  1.84,  0.99,  1.28, -0.17,  2.20, -2.01,  0.58,  0.32,  0.41,  1.10,  1.06,  0.41,  2.13, -0.72, -1.12, -0.25,  1.80]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.87,  1.95, -0.72, -2.16,  0.86, -0.26,  0.16,  0.47,  0.87,  1.30,  0.81, -0.82, -1.18, -1.24,  2.01,  1.39, -0.40,  1.89,  1.89,  1.98, -1.76, -1.49, -1.91, -1.15, -0.67,  0.63,  0.20,  0.39, -1.27,  0.92, -0.14,  0.14,  0.29, -0.57,  0.54,  0.97, -0.89,  2.65, -0.58,  1.53,  1.49, -1.54,  0.10,  1.22,  0.63, -1.19,  0.83,  1.84,  0.99,  1.28, -0.17,  2.20, -2.01,  0.58,  0.32,  0.41,  1.10,  1.06,  0.41,  2.13, -0.72, -1.12, -0.25,  1.80]
# {OUT} Y_N2 = [-3.32,  7.45, -2.74, -8.24,  3.29, -0.99,  0.62,  1.79,  3.32,  4.97,  3.10, -3.12, -4.52, -4.72,  7.67,  5.30, -1.54,  7.23,  7.21,  7.55, -6.73, -5.69, -7.31, -4.41, -2.57,  2.40,  0.78,  1.48, -4.87,  3.53, -0.52,  0.54,  1.10, -2.19,  2.06,  3.72, -3.41, 10.11, -2.21,  5.83,  5.68, -5.90,  0.40,  4.66,  2.39, -4.56,  3.17,  7.04,  3.79,  4.89, -0.65,  8.39, -7.69,  2.22,  1.22,  1.55,  4.22,  4.04,  1.56,  8.13, -2.75, -4.29, -0.95,  6.87]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-3.32,  7.45, -2.74, -8.24,  3.29, -0.99,  0.62,  1.79,  3.32,  4.97,  3.10, -3.12, -4.52, -4.72,  7.67,  5.30, -1.54,  7.23,  7.21,  7.55, -6.73, -5.69, -7.31, -4.41, -2.57,  2.40,  0.78,  1.48, -4.87,  3.53, -0.52,  0.54,  1.10, -2.19,  2.06,  3.72, -3.41, 10.11, -2.21,  5.83,  5.68, -5.90,  0.40,  4.66,  2.39, -4.56,  3.17,  7.04,  3.79,  4.89, -0.65,  8.39, -7.69,  2.22,  1.22,  1.55,  4.22,  4.04,  1.56,  8.13, -2.75, -4.29, -0.95,  6.87]
# {OUT} Y_N2 = [   -7,    15,    -5,   -16,     7,    -2,     1,     4,     7,    10,     6,    -6,    -9,    -9,    15,    11,    -3,    14,    14,    15,   -13,   -11,   -15,    -9,    -5,     5,     2,     3,   -10,     7,    -1,     1,     2,    -4,     4,     7,    -7,    20,    -4,    12,    11,   -12,     1,     9,     5,    -9,     6,    14,     8,    10,    -1,    17,   -15,     4,     2,     3,     8,     8,     3,    16,    -5,    -9,    -2,    14]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -7,    15,    -5,   -16,     7,    -2,     1,     4,     7,    10,     6,    -6,    -9,    -9,    15,    11,    -3,    14,    14,    15,   -13,   -11,   -15,    -9,    -5,     5,     2,     3,   -10,     7,    -1,     1,     2,    -4,     4,     7,    -7,    20,    -4,    12,    11,   -12,     1,     9,     5,    -9,     6,    14,     8,    10,    -1,    17,   -15,     4,     2,     3,     8,     8,     3,    16,    -5,    -9,    -2,    14]
# {OUT} Y_N2 = [   -7,    15,    -5,   -16,     7,    -2,     1,     4,     7,    10,     6,    -6,    -9,    -9,    15,    11,    -3,    14,    14,    15,   -13,   -11,   -15,    -9,    -5,     5,     2,     3,   -10,     7,    -1,     1,     2,    -4,     4,     7,    -7,    20,    -4,    12,    11,   -12,     1,     9,     5,    -9,     6,    14,     8,    10,    -1,    17,   -15,     4,     2,     3,     8,     8,     3,    16,    -5,    -9,    -2,    14]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -7,    15,    -5,   -16,     7,    -2,     1,     4,     7,    10,     6,    -6,    -9,    -9,    15,    11,    -3,    14,    14,    15,   -13,   -11,   -15,    -9,    -5,     5,     2,     3,   -10,     7,    -1,     1,     2,    -4,     4,     7,    -7,    20,    -4,    12,    11,   -12,     1,     9,     5,    -9,     6,    14,     8,    10,    -1,    17,   -15,     4,     2,     3,     8,     8,     3,    16,    -5,    -9,    -2,    14]
# {OUT} V_K = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0,     0,     0,     0,  -128,  -128,  -128,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0,     0,     0,     0,  -128,  -128,  -128,     0]
# {OUT} V_K2 = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0,     0,     0,     0,  -128,  -128,  -128,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     0]
# {IN}  V = [    0,  -128,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,     0,     0,     0,     0,  -128,  -128,  -128,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°18)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# {OUT} U_K2 = [    0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# {OUT} X_N = [    1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# {OUT} X_N2 = [    1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,     1,     1,     1,     0,     1,     0,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# {OUT} X_N2 = [-1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00, -1.00,  1.00]
# {OUT} Y_N = [-0.10, -2.53, -1.75, -1.37, -0.77,  1.02,  1.74, -0.99, -0.10, -1.44, -0.31, -0.25, -1.83,  1.11, -0.65,  1.26, -1.44,  0.32, -0.61, -1.70, -2.17, -1.32,  1.11, -0.30,  1.21, -2.03,  0.45,  2.12,  0.62, -0.22,  1.41, -1.66, -0.54, -0.60, -1.19,  0.68, -0.43, -1.69,  1.20, -1.69,  1.24,  0.58,  0.87, -1.57,  1.41,  1.16,  1.35, -1.04, -0.64,  1.95, -0.67,  1.43, -0.02,  2.33,  1.13, -2.77, -0.76,  1.29, -1.58,  1.20, -1.41,  0.75, -1.79,  1.73]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.10, -2.53, -1.75, -1.37, -0.77,  1.02,  1.74, -0.99, -0.10, -1.44, -0.31, -0.25, -1.83,  1.11, -0.65,  1.26, -1.44,  0.32, -0.61, -1.70, -2.17, -1.32,  1.11, -0.30,  1.21, -2.03,  0.45,  2.12,  0.62, -0.22,  1.41, -1.66, -0.54, -0.60, -1.19,  0.68, -0.43, -1.69,  1.20, -1.69,  1.24,  0.58,  0.87, -1.57,  1.41,  1.16,  1.35, -1.04, -0.64,  1.95, -0.67,  1.43, -0.02,  2.33,  1.13, -2.77, -0.76,  1.29, -1.58,  1.20, -1.41,  0.75, -1.79,  1.73]
# {OUT} Y_N2 = [-0.10, -2.53, -1.75, -1.37, -0.77,  1.02,  1.74, -0.99, -0.10, -1.44, -0.31, -0.25, -1.83,  1.11, -0.65,  1.26, -1.44,  0.32, -0.61, -1.70, -2.17, -1.32,  1.11, -0.30,  1.21, -2.03,  0.45,  2.12,  0.62, -0.22,  1.41, -1.66, -0.54, -0.60, -1.19,  0.68, -0.43, -1.69,  1.20, -1.69,  1.24,  0.58,  0.87, -1.57,  1.41,  1.16,  1.35, -1.04, -0.64,  1.95, -0.67,  1.43, -0.02,  2.33,  1.13, -2.77, -0.76,  1.29, -1.58,  1.20, -1.41,  0.75, -1.79,  1.73]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-0.10, -2.53, -1.75, -1.37, -0.77,  1.02,  1.74, -0.99, -0.10, -1.44, -0.31, -0.25, -1.83,  1.11, -0.65,  1.26, -1.44,  0.32, -0.61, -1.70, -2.17, -1.32,  1.11, -0.30,  1.21, -2.03,  0.45,  2.12,  0.62, -0.22,  1.41, -1.66, -0.54, -0.60, -1.19,  0.68, -0.43, -1.69,  1.20, -1.69,  1.24,  0.58,  0.87, -1.57,  1.41,  1.16,  1.35, -1.04, -0.64,  1.95, -0.67,  1.43, -0.02,  2.33,  1.13, -2.77, -0.76,  1.29, -1.58,  1.20, -1.41,  0.75, -1.79,  1.73]
# {OUT} Y_N2 = [-0.40, -9.68, -6.70, -5.25, -2.93,  3.91,  6.65, -3.76, -0.37, -5.52, -1.17, -0.96, -6.99,  4.24, -2.47,  4.80, -5.51,  1.21, -2.33, -6.50, -8.30, -5.05,  4.23, -1.14,  4.63, -7.75,  1.70,  8.11,  2.39, -0.83,  5.39, -6.35, -2.07, -2.29, -4.56,  2.61, -1.65, -6.44,  4.58, -6.45,  4.73,  2.23,  3.32, -5.98,  5.37,  4.42,  5.15, -3.97, -2.43,  7.45, -2.56,  5.48, -0.06,  8.90,  4.33, -10.58, -2.91,  4.93, -6.04,  4.57, -5.37,  2.86, -6.82,  6.59]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-0.40, -9.68, -6.70, -5.25, -2.93,  3.91,  6.65, -3.76, -0.37, -5.52, -1.17, -0.96, -6.99,  4.24, -2.47,  4.80, -5.51,  1.21, -2.33, -6.50, -8.30, -5.05,  4.23, -1.14,  4.63, -7.75,  1.70,  8.11,  2.39, -0.83,  5.39, -6.35, -2.07, -2.29, -4.56,  2.61, -1.65, -6.44,  4.58, -6.45,  4.73,  2.23,  3.32, -5.98,  5.37,  4.42,  5.15, -3.97, -2.43,  7.45, -2.56,  5.48, -0.06,  8.90,  4.33, -10.58, -2.91,  4.93, -6.04,  4.57, -5.37,  2.86, -6.82,  6.59]
# {OUT} Y_N2 = [   -1,   -19,   -13,   -10,    -6,     8,    13,    -8,    -1,   -11,    -2,    -2,   -14,     8,    -5,    10,   -11,     2,    -5,   -13,   -17,   -10,     8,    -2,     9,   -16,     3,    16,     5,    -2,    11,   -13,    -4,    -5,    -9,     5,    -3,   -13,     9,   -13,     9,     4,     7,   -12,    11,     9,    10,    -8,    -5,    15,    -5,    11,     0,    18,     9,   -21,    -6,    10,   -12,     9,   -11,     6,   -14,    13]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   -1,   -19,   -13,   -10,    -6,     8,    13,    -8,    -1,   -11,    -2,    -2,   -14,     8,    -5,    10,   -11,     2,    -5,   -13,   -17,   -10,     8,    -2,     9,   -16,     3,    16,     5,    -2,    11,   -13,    -4,    -5,    -9,     5,    -3,   -13,     9,   -13,     9,     4,     7,   -12,    11,     9,    10,    -8,    -5,    15,    -5,    11,     0,    18,     9,   -21,    -6,    10,   -12,     9,   -11,     6,   -14,    13]
# {OUT} Y_N2 = [   -1,   -19,   -13,   -10,    -6,     8,    13,    -8,    -1,   -11,    -2,    -2,   -14,     8,    -5,    10,   -11,     2,    -5,   -13,   -17,   -10,     8,    -2,     9,   -16,     3,    16,     5,    -2,    11,   -13,    -4,    -5,    -9,     5,    -3,   -13,     9,   -13,     9,     4,     7,   -12,    11,     9,    10,    -8,    -5,    15,    -5,    11,     0,    18,     9,   -21,    -6,    10,   -12,     9,   -11,     6,   -14,    13]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   -1,   -19,   -13,   -10,    -6,     8,    13,    -8,    -1,   -11,    -2,    -2,   -14,     8,    -5,    10,   -11,     2,    -5,   -13,   -17,   -10,     8,    -2,     9,   -16,     3,    16,     5,    -2,    11,   -13,    -4,    -5,    -9,     5,    -3,   -13,     9,   -13,     9,     4,     7,   -12,    11,     9,    10,    -8,    -5,    15,    -5,    11,     0,    18,     9,   -21,    -6,    10,   -12,     9,   -11,     6,   -14,    13]
# {OUT} V_K = [    0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0]
# {OUT} V_K2 = [    0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     0,     0,     0,     0,     0,     1,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     1,     0,     0,     1,     1,     0,     1,     0,     1,     0,     1,     0]
# {IN}  V = [    0,  -128,     0,     0,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,  -128,     0,  -128,     0,  -128,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°19)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# {OUT} U_K2 = [    1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# {OUT} X_N = [    0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# {OUT} X_N2 = [    0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     0,     1,     0,     1,     1,     0,     1,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# {OUT} X_N2 = [ 1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00]
# {OUT} Y_N = [ 0.15,  0.02, -2.14,  0.81, -0.43, -1.17, -0.52, -1.37,  0.77,  0.96,  2.28,  0.10, -0.10,  0.50, -2.30, -1.97, -1.05, -2.13,  0.54, -1.77, -1.17, -1.97, -0.24, -1.06, -0.07, -0.77, -1.16, -0.80,  0.41, -0.86, -1.74, -1.26,  1.15,  1.71, -1.70,  0.22, -2.20, -2.06, -0.10, -0.98, -1.70, -0.75, -0.72, -1.11,  0.43,  1.27,  0.00,  2.84,  0.54,  1.82, -1.19,  1.80,  0.96,  0.74, -1.28,  0.80, -1.75, -0.69,  0.08, -0.59, -1.86, -0.55, -1.88, -1.52]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 0.15,  0.02, -2.14,  0.81, -0.43, -1.17, -0.52, -1.37,  0.77,  0.96,  2.28,  0.10, -0.10,  0.50, -2.30, -1.97, -1.05, -2.13,  0.54, -1.77, -1.17, -1.97, -0.24, -1.06, -0.07, -0.77, -1.16, -0.80,  0.41, -0.86, -1.74, -1.26,  1.15,  1.71, -1.70,  0.22, -2.20, -2.06, -0.10, -0.98, -1.70, -0.75, -0.72, -1.11,  0.43,  1.27,  0.00,  2.84,  0.54,  1.82, -1.19,  1.80,  0.96,  0.74, -1.28,  0.80, -1.75, -0.69,  0.08, -0.59, -1.86, -0.55, -1.88, -1.52]
# {OUT} Y_N2 = [ 0.15,  0.02, -2.14,  0.81, -0.43, -1.17, -0.52, -1.37,  0.77,  0.96,  2.28,  0.10, -0.10,  0.50, -2.30, -1.97, -1.05, -2.13,  0.54, -1.77, -1.17, -1.97, -0.24, -1.06, -0.07, -0.77, -1.16, -0.80,  0.41, -0.86, -1.74, -1.26,  1.15,  1.71, -1.70,  0.22, -2.20, -2.06, -0.10, -0.98, -1.70, -0.75, -0.72, -1.11,  0.43,  1.27,  0.00,  2.84,  0.54,  1.82, -1.19,  1.80,  0.96,  0.74, -1.28,  0.80, -1.75, -0.69,  0.08, -0.59, -1.86, -0.55, -1.88, -1.52]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 0.15,  0.02, -2.14,  0.81, -0.43, -1.17, -0.52, -1.37,  0.77,  0.96,  2.28,  0.10, -0.10,  0.50, -2.30, -1.97, -1.05, -2.13,  0.54, -1.77, -1.17, -1.97, -0.24, -1.06, -0.07, -0.77, -1.16, -0.80,  0.41, -0.86, -1.74, -1.26,  1.15,  1.71, -1.70,  0.22, -2.20, -2.06, -0.10, -0.98, -1.70, -0.75, -0.72, -1.11,  0.43,  1.27,  0.00,  2.84,  0.54,  1.82, -1.19,  1.80,  0.96,  0.74, -1.28,  0.80, -1.75, -0.69,  0.08, -0.59, -1.86, -0.55, -1.88, -1.52]
# {OUT} Y_N2 = [ 0.56,  0.08, -8.16,  3.09, -1.63, -4.48, -1.97, -5.22,  2.93,  3.67,  8.71,  0.37, -0.39,  1.91, -8.79, -7.52, -4.02, -8.15,  2.05, -6.77, -4.48, -7.54, -0.92, -4.04, -0.28, -2.95, -4.42, -3.04,  1.56, -3.30, -6.64, -4.83,  4.39,  6.53, -6.50,  0.84, -8.42, -7.85, -0.38, -3.75, -6.51, -2.87, -2.75, -4.25,  1.63,  4.86,  0.01, 10.84,  2.05,  6.95, -4.56,  6.87,  3.68,  2.81, -4.87,  3.04, -6.70, -2.64,  0.31, -2.25, -7.11, -2.10, -7.18, -5.82]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 0.56,  0.08, -8.16,  3.09, -1.63, -4.48, -1.97, -5.22,  2.93,  3.67,  8.71,  0.37, -0.39,  1.91, -8.79, -7.52, -4.02, -8.15,  2.05, -6.77, -4.48, -7.54, -0.92, -4.04, -0.28, -2.95, -4.42, -3.04,  1.56, -3.30, -6.64, -4.83,  4.39,  6.53, -6.50,  0.84, -8.42, -7.85, -0.38, -3.75, -6.51, -2.87, -2.75, -4.25,  1.63,  4.86,  0.01, 10.84,  2.05,  6.95, -4.56,  6.87,  3.68,  2.81, -4.87,  3.04, -6.70, -2.64,  0.31, -2.25, -7.11, -2.10, -7.18, -5.82]
# {OUT} Y_N2 = [    1,     0,   -16,     6,    -3,    -9,    -4,   -10,     6,     7,    17,     1,    -1,     4,   -18,   -15,    -8,   -16,     4,   -14,    -9,   -15,    -2,    -8,    -1,    -6,    -9,    -6,     3,    -7,   -13,   -10,     9,    13,   -13,     2,   -17,   -16,    -1,    -8,   -13,    -6,    -6,    -9,     3,    10,     0,    22,     4,    14,    -9,    14,     7,     6,   -10,     6,   -13,    -5,     1,    -5,   -14,    -4,   -14,   -12]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [    1,     0,   -16,     6,    -3,    -9,    -4,   -10,     6,     7,    17,     1,    -1,     4,   -18,   -15,    -8,   -16,     4,   -14,    -9,   -15,    -2,    -8,    -1,    -6,    -9,    -6,     3,    -7,   -13,   -10,     9,    13,   -13,     2,   -17,   -16,    -1,    -8,   -13,    -6,    -6,    -9,     3,    10,     0,    22,     4,    14,    -9,    14,     7,     6,   -10,     6,   -13,    -5,     1,    -5,   -14,    -4,   -14,   -12]
# {OUT} Y_N2 = [    1,     0,   -16,     6,    -3,    -9,    -4,   -10,     6,     7,    17,     1,    -1,     4,   -18,   -15,    -8,   -16,     4,   -14,    -9,   -15,    -2,    -8,    -1,    -6,    -9,    -6,     3,    -7,   -13,   -10,     9,    13,   -13,     2,   -17,   -16,    -1,    -8,   -13,    -6,    -6,    -9,     3,    10,     0,    22,     4,    14,    -9,    14,     7,     6,   -10,     6,   -13,    -5,     1,    -5,   -14,    -4,   -14,   -12]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [    1,     0,   -16,     6,    -3,    -9,    -4,   -10,     6,     7,    17,     1,    -1,     4,   -18,   -15,    -8,   -16,     4,   -14,    -9,   -15,    -2,    -8,    -1,    -6,    -9,    -6,     3,    -7,   -13,   -10,     9,    13,   -13,     2,   -17,   -16,    -1,    -8,   -13,    -6,    -6,    -9,     3,    10,     0,    22,     4,    14,    -9,    14,     7,     6,   -10,     6,   -13,    -5,     1,    -5,   -14,    -4,   -14,   -12]
# {OUT} V_K = [ -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# {OUT} V_K2 = [ -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     1,     1,     1]
# {IN}  V = [ -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°20)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    1,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    1,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# {OUT} U_K2 = [    1,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    1,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# {OUT} X_N = [    0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# {OUT} X_N2 = [    0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    0,     1,     1,     0,     1,     1,     0,     0,     1,     1,     0,     1,     1,     0,     1,     1,     1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,     1,     1,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# {OUT} X_N2 = [ 1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [ 1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00, -1.00]
# {OUT} Y_N = [ 1.60, -0.57, -1.09,  0.68, -0.91, -1.52,  1.07,  1.42, -1.35, -0.93,  1.27, -1.62, -0.37,  1.55, -1.21, -1.70, -0.45, -1.28, -0.90, -1.50,  0.06,  1.12, -0.65, -0.57, -2.28,  0.31, -1.72,  0.96, -1.50, -0.07, -1.54,  0.84,  0.28, -0.23, -0.03,  0.88,  1.02, -0.90,  1.41,  0.91,  1.42, -2.27,  1.47,  0.35,  0.61,  1.90, -0.96, -1.14, -1.36,  1.82,  1.56,  2.80,  1.55, -1.16,  1.18,  1.17, -1.20,  0.01,  1.87, -0.15, -1.22,  1.29,  1.33, -0.02]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.60, -0.57, -1.09,  0.68, -0.91, -1.52,  1.07,  1.42, -1.35, -0.93,  1.27, -1.62, -0.37,  1.55, -1.21, -1.70, -0.45, -1.28, -0.90, -1.50,  0.06,  1.12, -0.65, -0.57, -2.28,  0.31, -1.72,  0.96, -1.50, -0.07, -1.54,  0.84,  0.28, -0.23, -0.03,  0.88,  1.02, -0.90,  1.41,  0.91,  1.42, -2.27,  1.47,  0.35,  0.61,  1.90, -0.96, -1.14, -1.36,  1.82,  1.56,  2.80,  1.55, -1.16,  1.18,  1.17, -1.20,  0.01,  1.87, -0.15, -1.22,  1.29,  1.33, -0.02]
# {OUT} Y_N2 = [ 1.60, -0.57, -1.09,  0.68, -0.91, -1.52,  1.07,  1.42, -1.35, -0.93,  1.27, -1.62, -0.37,  1.55, -1.21, -1.70, -0.45, -1.28, -0.90, -1.50,  0.06,  1.12, -0.65, -0.57, -2.28,  0.31, -1.72,  0.96, -1.50, -0.07, -1.54,  0.84,  0.28, -0.23, -0.03,  0.88,  1.02, -0.90,  1.41,  0.91,  1.42, -2.27,  1.47,  0.35,  0.61,  1.90, -0.96, -1.14, -1.36,  1.82,  1.56,  2.80,  1.55, -1.16,  1.18,  1.17, -1.20,  0.01,  1.87, -0.15, -1.22,  1.29,  1.33, -0.02]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 1.60, -0.57, -1.09,  0.68, -0.91, -1.52,  1.07,  1.42, -1.35, -0.93,  1.27, -1.62, -0.37,  1.55, -1.21, -1.70, -0.45, -1.28, -0.90, -1.50,  0.06,  1.12, -0.65, -0.57, -2.28,  0.31, -1.72,  0.96, -1.50, -0.07, -1.54,  0.84,  0.28, -0.23, -0.03,  0.88,  1.02, -0.90,  1.41,  0.91,  1.42, -2.27,  1.47,  0.35,  0.61,  1.90, -0.96, -1.14, -1.36,  1.82,  1.56,  2.80,  1.55, -1.16,  1.18,  1.17, -1.20,  0.01,  1.87, -0.15, -1.22,  1.29,  1.33, -0.02]
# {OUT} Y_N2 = [ 6.13, -2.16, -4.18,  2.61, -3.48, -5.80,  4.09,  5.43, -5.16, -3.57,  4.86, -6.19, -1.41,  5.94, -4.63, -6.50, -1.73, -4.91, -3.43, -5.75,  0.24,  4.26, -2.47, -2.18, -8.71,  1.19, -6.56,  3.68, -5.74, -0.28, -5.90,  3.23,  1.07, -0.86, -0.12,  3.36,  3.88, -3.44,  5.37,  3.48,  5.41, -8.66,  5.61,  1.32,  2.34,  7.26, -3.68, -4.35, -5.20,  6.94,  5.95, 10.69,  5.93, -4.44,  4.53,  4.49, -4.59,  0.05,  7.15, -0.59, -4.64,  4.92,  5.07, -0.08]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 6.13, -2.16, -4.18,  2.61, -3.48, -5.80,  4.09,  5.43, -5.16, -3.57,  4.86, -6.19, -1.41,  5.94, -4.63, -6.50, -1.73, -4.91, -3.43, -5.75,  0.24,  4.26, -2.47, -2.18, -8.71,  1.19, -6.56,  3.68, -5.74, -0.28, -5.90,  3.23,  1.07, -0.86, -0.12,  3.36,  3.88, -3.44,  5.37,  3.48,  5.41, -8.66,  5.61,  1.32,  2.34,  7.26, -3.68, -4.35, -5.20,  6.94,  5.95, 10.69,  5.93, -4.44,  4.53,  4.49, -4.59,  0.05,  7.15, -0.59, -4.64,  4.92,  5.07, -0.08]
# {OUT} Y_N2 = [   12,    -4,    -8,     5,    -7,   -12,     8,    11,   -10,    -7,    10,   -12,    -3,    12,    -9,   -13,    -3,   -10,    -7,   -11,     0,     9,    -5,    -4,   -17,     2,   -13,     7,   -11,    -1,   -12,     6,     2,    -2,     0,     7,     8,    -7,    11,     7,    11,   -17,    11,     3,     5,    15,    -7,    -9,   -10,    14,    12,    21,    12,    -9,     9,     9,    -9,     0,    14,    -1,    -9,    10,    10,     0]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [   12,    -4,    -8,     5,    -7,   -12,     8,    11,   -10,    -7,    10,   -12,    -3,    12,    -9,   -13,    -3,   -10,    -7,   -11,     0,     9,    -5,    -4,   -17,     2,   -13,     7,   -11,    -1,   -12,     6,     2,    -2,     0,     7,     8,    -7,    11,     7,    11,   -17,    11,     3,     5,    15,    -7,    -9,   -10,    14,    12,    21,    12,    -9,     9,     9,    -9,     0,    14,    -1,    -9,    10,    10,     0]
# {OUT} Y_N2 = [   12,    -4,    -8,     5,    -7,   -12,     8,    11,   -10,    -7,    10,   -12,    -3,    12,    -9,   -13,    -3,   -10,    -7,   -11,     0,     9,    -5,    -4,   -17,     2,   -13,     7,   -11,    -1,   -12,     6,     2,    -2,     0,     7,     8,    -7,    11,     7,    11,   -17,    11,     3,     5,    15,    -7,    -9,   -10,    14,    12,    21,    12,    -9,     9,     9,    -9,     0,    14,    -1,    -9,    10,    10,     0]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [   12,    -4,    -8,     5,    -7,   -12,     8,    11,   -10,    -7,    10,   -12,    -3,    12,    -9,   -13,    -3,   -10,    -7,   -11,     0,     9,    -5,    -4,   -17,     2,   -13,     7,   -11,    -1,   -12,     6,     2,    -2,     0,     7,     8,    -7,    11,     7,    11,   -17,    11,     3,     5,    15,    -7,    -9,   -10,    14,    12,    21,    12,    -9,     9,     9,    -9,     0,    14,    -1,    -9,    10,    10,     0]
# {OUT} V_K = [ -128,  -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128]
# {OUT} V_K2 = [ -128,  -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    1,     1,     1,     0,     1,     1,     1,     0,     0,     0,     1,     0,     1,     0,     0,     1,     1,     0,     0,     0,     0,     1,     0,     0,     1,     0,     0,     1,     1,     0,     0,     1]
# {IN}  V = [ -128,  -128,  -128,     0,  -128,  -128,  -128,     0,     0,     0,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,  -128,     0,     0,  -128,  -128,     0,     0,  -128]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°21)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# {OUT} U_K2 = [    0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# {OUT} X_N = [    1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# {OUT} X_N2 = [    1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     1,     1,     0,     0,     0,     0,     0,     0,     1,     0,     1,     1,     0,     0,     0,     1,     0,     0,     1,     0,     0,     0,     1,     0,     1,     1,     1,     1,     1,     0,     0,     0,     1,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# {OUT} X_N2 = [-1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00]
# {OUT} Y_N = [ 0.06, -0.55, -0.68,  1.74,  1.31,  0.81, -0.03, -0.98,  1.12, -2.00,  0.73,  0.12, -1.21,  1.25,  0.25,  0.28, -0.28,  1.09,  0.43, -0.33,  0.02,  2.03,  1.10, -1.88,  0.37, -0.54,  0.02, -0.86, -0.69, -1.13,  1.67,  0.70,  1.89, -0.44, -1.61, -0.40, -0.60, -1.01,  0.65,  1.37, -1.93,  0.60,  1.98,  2.05,  0.83, -1.75,  1.20,  1.54,  1.28,  0.09,  1.71, -0.93, -1.20, -1.25,  1.41, -0.54, -0.61,  0.01,  0.07,  1.98, -0.32,  0.97,  1.25,  0.52]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 0.06, -0.55, -0.68,  1.74,  1.31,  0.81, -0.03, -0.98,  1.12, -2.00,  0.73,  0.12, -1.21,  1.25,  0.25,  0.28, -0.28,  1.09,  0.43, -0.33,  0.02,  2.03,  1.10, -1.88,  0.37, -0.54,  0.02, -0.86, -0.69, -1.13,  1.67,  0.70,  1.89, -0.44, -1.61, -0.40, -0.60, -1.01,  0.65,  1.37, -1.93,  0.60,  1.98,  2.05,  0.83, -1.75,  1.20,  1.54,  1.28,  0.09,  1.71, -0.93, -1.20, -1.25,  1.41, -0.54, -0.61,  0.01,  0.07,  1.98, -0.32,  0.97,  1.25,  0.52]
# {OUT} Y_N2 = [ 0.06, -0.55, -0.68,  1.74,  1.31,  0.81, -0.03, -0.98,  1.12, -2.00,  0.73,  0.12, -1.21,  1.25,  0.25,  0.28, -0.28,  1.09,  0.43, -0.33,  0.02,  2.03,  1.10, -1.88,  0.37, -0.54,  0.02, -0.86, -0.69, -1.13,  1.67,  0.70,  1.89, -0.44, -1.61, -0.40, -0.60, -1.01,  0.65,  1.37, -1.93,  0.60,  1.98,  2.05,  0.83, -1.75,  1.20,  1.54,  1.28,  0.09,  1.71, -0.93, -1.20, -1.25,  1.41, -0.54, -0.61,  0.01,  0.07,  1.98, -0.32,  0.97,  1.25,  0.52]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [ 0.06, -0.55, -0.68,  1.74,  1.31,  0.81, -0.03, -0.98,  1.12, -2.00,  0.73,  0.12, -1.21,  1.25,  0.25,  0.28, -0.28,  1.09,  0.43, -0.33,  0.02,  2.03,  1.10, -1.88,  0.37, -0.54,  0.02, -0.86, -0.69, -1.13,  1.67,  0.70,  1.89, -0.44, -1.61, -0.40, -0.60, -1.01,  0.65,  1.37, -1.93,  0.60,  1.98,  2.05,  0.83, -1.75,  1.20,  1.54,  1.28,  0.09,  1.71, -0.93, -1.20, -1.25,  1.41, -0.54, -0.61,  0.01,  0.07,  1.98, -0.32,  0.97,  1.25,  0.52]
# {OUT} Y_N2 = [ 0.24, -2.10, -2.60,  6.66,  5.02,  3.10, -0.10, -3.76,  4.26, -7.65,  2.81,  0.45, -4.62,  4.79,  0.96,  1.09, -1.07,  4.17,  1.65, -1.25,  0.09,  7.76,  4.22, -7.17,  1.41, -2.05,  0.09, -3.29, -2.65, -4.31,  6.36,  2.67,  7.22, -1.67, -6.15, -1.53, -2.30, -3.86,  2.47,  5.24, -7.35,  2.29,  7.58,  7.84,  3.16, -6.69,  4.60,  5.88,  4.90,  0.35,  6.54, -3.55, -4.57, -4.79,  5.37, -2.05, -2.31,  0.04,  0.29,  7.57, -1.22,  3.72,  4.77,  1.98]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [ 0.24, -2.10, -2.60,  6.66,  5.02,  3.10, -0.10, -3.76,  4.26, -7.65,  2.81,  0.45, -4.62,  4.79,  0.96,  1.09, -1.07,  4.17,  1.65, -1.25,  0.09,  7.76,  4.22, -7.17,  1.41, -2.05,  0.09, -3.29, -2.65, -4.31,  6.36,  2.67,  7.22, -1.67, -6.15, -1.53, -2.30, -3.86,  2.47,  5.24, -7.35,  2.29,  7.58,  7.84,  3.16, -6.69,  4.60,  5.88,  4.90,  0.35,  6.54, -3.55, -4.57, -4.79,  5.37, -2.05, -2.31,  0.04,  0.29,  7.57, -1.22,  3.72,  4.77,  1.98]
# {OUT} Y_N2 = [    0,    -4,    -5,    13,    10,     6,     0,    -8,     9,   -15,     6,     1,    -9,    10,     2,     2,    -2,     8,     3,    -3,     0,    16,     8,   -14,     3,    -4,     0,    -7,    -5,    -9,    13,     5,    14,    -3,   -12,    -3,    -5,    -8,     5,    10,   -15,     5,    15,    16,     6,   -13,     9,    12,    10,     1,    13,    -7,    -9,   -10,    11,    -4,    -5,     0,     1,    15,    -2,     7,    10,     4]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [    0,    -4,    -5,    13,    10,     6,     0,    -8,     9,   -15,     6,     1,    -9,    10,     2,     2,    -2,     8,     3,    -3,     0,    16,     8,   -14,     3,    -4,     0,    -7,    -5,    -9,    13,     5,    14,    -3,   -12,    -3,    -5,    -8,     5,    10,   -15,     5,    15,    16,     6,   -13,     9,    12,    10,     1,    13,    -7,    -9,   -10,    11,    -4,    -5,     0,     1,    15,    -2,     7,    10,     4]
# {OUT} Y_N2 = [    0,    -4,    -5,    13,    10,     6,     0,    -8,     9,   -15,     6,     1,    -9,    10,     2,     2,    -2,     8,     3,    -3,     0,    16,     8,   -14,     3,    -4,     0,    -7,    -5,    -9,    13,     5,    14,    -3,   -12,    -3,    -5,    -8,     5,    10,   -15,     5,    15,    16,     6,   -13,     9,    12,    10,     1,    13,    -7,    -9,   -10,    11,    -4,    -5,     0,     1,    15,    -2,     7,    10,     4]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [    0,    -4,    -5,    13,    10,     6,     0,    -8,     9,   -15,     6,     1,    -9,    10,     2,     2,    -2,     8,     3,    -3,     0,    16,     8,   -14,     3,    -4,     0,    -7,    -5,    -9,    13,     5,    14,    -3,   -12,    -3,    -5,    -8,     5,    10,   -15,     5,    15,    16,     6,   -13,     9,    12,    10,     1,    13,    -7,    -9,   -10,    11,    -4,    -5,     0,     1,    15,    -2,     7,    10,     4]
# {OUT} V_K = [    0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [    0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0]
# {OUT} V_K2 = [    0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     1,     1,     1,     1,     1,     0,     0,     0,     0,     1,     0,     0,     0,     1,     0,     0,     0,     0,     0,     1,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0]
# {IN}  V = [    0,  -128,  -128,  -128,  -128,  -128,     0,     0,     0,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,     0,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,     0,     0,     0,     0,     0]
# Returned status: 0
#
# -------------------------------
# New communication (nÂ°22)
# -------------------------------
#
# Source_random_fast::generate(int8 U_K[32])
# {OUT} U_K = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# Returned status: 0
#
# CRC_NO::build(const int8 U_K1[32], int8 U_K2[32])
# {IN}  U_K1 = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# {OUT} U_K2 = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# Returned status: 0
#
# Encoder_polar_sys::encode(const int8 U_K[32], int8 X_N[64])
# {IN}  U_K = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# {OUT} X_N = [    1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# Returned status: 0
#
# Puncturer_NO::puncture(const int8 X_N1[64], int8 X_N2[64])
# {IN}  X_N1 = [    1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# {OUT} X_N2 = [    1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# Returned status: 0
#
# Modem_BPSK::modulate(const int8 X_N1[64], float32 X_N2[64])
# {IN}  X_N1 = [    1,     1,     1,     1,     0,     0,     1,     1,     1,     1,     0,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     0,     0,     0,     1,     0,     0,     0,     1,     1,     0,     1,     0,     1,     1,     1,     0,     1,     0,     0,     0,     1,     0,     0,     1,     0,     1,     1,     0,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# {OUT} X_N2 = [-1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00]
# Returned status: 0
#
# Channel_AWGN_LLR::add_noise(const float32 X_N[64], float32 Y_N[64])
# {IN}  X_N = [-1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00,  1.00,  1.00, -1.00,  1.00,  1.00, -1.00,  1.00, -1.00, -1.00,  1.00, -1.00, -1.00,  1.00,  1.00,  1.00,  1.00,  1.00, -1.00, -1.00, -1.00, -1.00,  1.00, -1.00,  1.00, -1.00]
# {OUT} Y_N = [-1.91, -1.36, -1.57, -2.16,  1.96, -0.06, -2.10, -0.58, -1.82, -0.94,  0.43,  0.44, -1.76, -2.28,  1.71,  0.69,  0.22,  0.48,  1.73, -1.89, -1.70,  1.45,  0.30,  0.41, -2.01,  0.40, -0.72,  0.37, -0.68,  0.52,  1.58, -1.05,  0.87, -2.11,  1.05, -0.76, -0.16,  0.16,  1.76,  1.16,  0.98, -0.09, -0.09,  2.03,  0.16,  0.22, -0.78,  0.34,  1.43, -2.59, -2.84,  1.76,  0.66, -0.32, -0.10, -0.57,  0.23, -1.20, -1.88, -0.88, -0.60, -1.42,  0.53, -1.42]
# Returned status: 0
#
# Modem_BPSK::filter(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.91, -1.36, -1.57, -2.16,  1.96, -0.06, -2.10, -0.58, -1.82, -0.94,  0.43,  0.44, -1.76, -2.28,  1.71,  0.69,  0.22,  0.48,  1.73, -1.89, -1.70,  1.45,  0.30,  0.41, -2.01,  0.40, -0.72,  0.37, -0.68,  0.52,  1.58, -1.05,  0.87, -2.11,  1.05, -0.76, -0.16,  0.16,  1.76,  1.16,  0.98, -0.09, -0.09,  2.03,  0.16,  0.22, -0.78,  0.34,  1.43, -2.59, -2.84,  1.76,  0.66, -0.32, -0.10, -0.57,  0.23, -1.20, -1.88, -0.88, -0.60, -1.42,  0.53, -1.42]
# {OUT} Y_N2 = [-1.91, -1.36, -1.57, -2.16,  1.96, -0.06, -2.10, -0.58, -1.82, -0.94,  0.43,  0.44, -1.76, -2.28,  1.71,  0.69,  0.22,  0.48,  1.73, -1.89, -1.70,  1.45,  0.30,  0.41, -2.01,  0.40, -0.72,  0.37, -0.68,  0.52,  1.58, -1.05,  0.87, -2.11,  1.05, -0.76, -0.16,  0.16,  1.76,  1.16,  0.98, -0.09, -0.09,  2.03,  0.16,  0.22, -0.78,  0.34,  1.43, -2.59, -2.84,  1.76,  0.66, -0.32, -0.10, -0.57,  0.23, -1.20, -1.88, -0.88, -0.60, -1.42,  0.53, -1.42]
# Returned status: 0
#
# Modem_BPSK::demodulate(const float32 Y_N1[64], float32 Y_N2[64])
# {IN}  Y_N1 = [-1.91, -1.36, -1.57, -2.16,  1.96, -0.06, -2.10, -0.58, -1.82, -0.94,  0.43,  0.44, -1.76, -2.28,  1.71,  0.69,  0.22,  0.48,  1.73, -1.89, -1.70,  1.45,  0.30,  0.41, -2.01,  0.40, -0.72,  0.37, -0.68,  0.52,  1.58, -1.05,  0.87, -2.11,  1.05, -0.76, -0.16,  0.16,  1.76,  1.16,  0.98, -0.09, -0.09,  2.03,  0.16,  0.22, -0.78,  0.34,  1.43, -2.59, -2.84,  1.76,  0.66, -0.32, -0.10, -0.57,  0.23, -1.20, -1.88, -0.88, -0.60, -1.42,  0.53, -1.42]
# {OUT} Y_N2 = [-7.31, -5.19, -6.01, -8.24,  7.48, -0.24, -8.01, -2.22, -6.95, -3.60,  1.63,  1.66, -6.73, -8.72,  6.52,  2.63,  0.82,  1.84,  6.60, -7.20, -6.50,  5.55,  1.15,  1.57, -7.69,  1.51, -2.74,  1.43, -2.59,  2.00,  6.05, -3.99,  3.32, -8.06,  4.03, -2.91, -0.62,  0.62,  6.74,  4.42,  3.76, -0.35, -0.33,  7.74,  0.62,  0.83, -2.96,  1.30,  5.45, -9.91, -10.86,  6.73,  2.54, -1.21, -0.38, -2.19,  0.87, -4.59, -7.18, -3.36, -2.31, -5.44,  2.03, -5.42]
# Returned status: 0
#
# Quantizer_standard::process(const float32 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [-7.31, -5.19, -6.01, -8.24,  7.48, -0.24, -8.01, -2.22, -6.95, -3.60,  1.63,  1.66, -6.73, -8.72,  6.52,  2.63,  0.82,  1.84,  6.60, -7.20, -6.50,  5.55,  1.15,  1.57, -7.69,  1.51, -2.74,  1.43, -2.59,  2.00,  6.05, -3.99,  3.32, -8.06,  4.03, -2.91, -0.62,  0.62,  6.74,  4.42,  3.76, -0.35, -0.33,  7.74,  0.62,  0.83, -2.96,  1.30,  5.45, -9.91, -10.86,  6.73,  2.54, -1.21, -0.38, -2.19,  0.87, -4.59, -7.18, -3.36, -2.31, -5.44,  2.03, -5.42]
# {OUT} Y_N2 = [  -15,   -10,   -12,   -16,    15,     0,   -16,    -4,   -14,    -7,     3,     3,   -13,   -17,    13,     5,     2,     4,    13,   -14,   -13,    11,     2,     3,   -15,     3,    -5,     3,    -5,     4,    12,    -8,     7,   -16,     8,    -6,    -1,     1,    13,     9,     8,    -1,    -1,    15,     1,     2,    -6,     3,    11,   -20,   -22,    13,     5,    -2,    -1,    -4,     2,    -9,   -14,    -7,    -5,   -11,     4,   -11]
# Returned status: 0
#
# Puncturer_NO::depuncture(const int8 Y_N1[64], int8 Y_N2[64])
# {IN}  Y_N1 = [  -15,   -10,   -12,   -16,    15,     0,   -16,    -4,   -14,    -7,     3,     3,   -13,   -17,    13,     5,     2,     4,    13,   -14,   -13,    11,     2,     3,   -15,     3,    -5,     3,    -5,     4,    12,    -8,     7,   -16,     8,    -6,    -1,     1,    13,     9,     8,    -1,    -1,    15,     1,     2,    -6,     3,    11,   -20,   -22,    13,     5,    -2,    -1,    -4,     2,    -9,   -14,    -7,    -5,   -11,     4,   -11]
# {OUT} Y_N2 = [  -15,   -10,   -12,   -16,    15,     0,   -16,    -4,   -14,    -7,     3,     3,   -13,   -17,    13,     5,     2,     4,    13,   -14,   -13,    11,     2,     3,   -15,     3,    -5,     3,    -5,     4,    12,    -8,     7,   -16,     8,    -6,    -1,     1,    13,     9,     8,    -1,    -1,    15,     1,     2,    -6,     3,    11,   -20,   -22,    13,     5,    -2,    -1,    -4,     2,    -9,   -14,    -7,    -5,   -11,     4,   -11]
# Returned status: 0
#
# Decoder_polar_SC_fast_sys::decode_siho(const int8 Y_N[64], int8 V_K[32])
# {IN}  Y_N = [  -15,   -10,   -12,   -16,    15,     0,   -16,    -4,   -14,    -7,     3,     3,   -13,   -17,    13,     5,     2,     4,    13,   -14,   -13,    11,     2,     3,   -15,     3,    -5,     3,    -5,     4,    12,    -8,     7,   -16,     8,    -6,    -1,     1,    13,     9,     8,    -1,    -1,    15,     1,     2,    -6,     3,    11,   -20,   -22,    13,     5,    -2,    -1,    -4,     2,    -9,   -14,    -7,    -5,   -11,     4,   -11]
# {OUT} V_K = [ -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128]
# Returned status: 0
#
# CRC_NO::extract(const int8 V_K1[32], int8 V_K2[32])
# {IN}  V_K1 = [ -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128]
# {OUT} V_K2 = [ -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128]
# Returned status: 0
#
# Monitor_BFER::check_errors(const int8 U[32], const int8 V[32])
# {IN}  U = [    0,     0,     0,     0,     1,     1,     0,     1,     0,     0,     1,     0,     0,     1,     0,     1,     1,     1,     1,     0,     0,     0,     0,     0,     1,     1,     1,     1,     0,     1,     0,     1]
# {IN}  V = [ -128,  -128,  -128,     0,  -128,  -128,     0,  -128,     0,     0,  -128,  -128,     0,     0,     0,  -128,     0,  -128,  -128,     0,  -128,  -128,     0,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     0,  -128]
# Returned status: 10
#
# ----------------------------------------------------------------------||---------------------
#       Bit Error Rate (BER) and Frame Error Rate (FER) depending       ||  Global throughput  
#                    on the Signal Noise Ratio (SNR)                    ||  and elapsed time   
# ----------------------------------------------------------------------||---------------------
# -------|-------|----------|----------|----------|----------|----------||----------|----------
#  Es/N0 | Eb/N0 |      FRA |       BE |       FE |      BER |      FER ||  SIM_THR |    ET/RT 
#   (dB) |  (dB) |          |          |          |          |          ||   (Mb/s) | (hhmmss) 
# -------|-------|----------|----------|----------|----------|----------||----------|----------
   -0.20 |  2.81 |       23 |       15 |        2 | 2.04e-02 | 8.70e-02 ||     0.03 | 00h00'00  
# End of the simulation.
